<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StrongGrid</name>
    </assembly>
    <members>
        <member name="T:StrongGrid.Client">
            <summary>
            REST client for interacting with SendGrid's API
            </summary>
        </member>
        <member name="P:StrongGrid.Client.AccessManagement">
            <summary>
            Gets the Access Management resource which allows you to control IP whitelisting
            </summary>
            <value>
            The access management.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Alerts">
            <summary>
            Gets the Alerts resource which allows you to receive notifications regarding your email usage or statistics.
            </summary>
            <value>
            The alerts.
            </value>
        </member>
        <member name="P:StrongGrid.Client.ApiKeys">
            <summary>
            Gets the API Keys resource which allows you to manage your API Keys.
            </summary>
            <value>
            The API keys.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Batches">
            <summary>
            Gets the Batches resource.
            </summary>
            <value>
            The batches.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Blocks">
            <summary>
            Gets the Blocks resource which allows you to manage blacked email addresses.
            </summary>
            <value>
            The blocks.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Bounces">
            <summary>
            Gets the Bounces resource which allows you to manage bounces.
            </summary>
            <value>
            The bounces.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Campaigns">
            <summary>
            Gets the Campaigns resource which allows you to manage your campaigns.
            </summary>
            <value>
            The campaigns.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Categories">
            <summary>
            Gets the Categories resource which allows you to manages your categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Contacts">
            <summary>
            Gets the Contacts resource which allows you to manage your contacts (also sometimes refered to as 'recipients').
            </summary>
            <value>
            The contacts.
            </value>
        </member>
        <member name="P:StrongGrid.Client.CustomFields">
            <summary>
            Gets the CustomFields resource which allows you to manage your custom fields.
            </summary>
            <value>
            The custom fields.
            </value>
        </member>
        <member name="P:StrongGrid.Client.GlobalSuppressions">
            <summary>
            Gets the GlobalSuppressions resource.
            </summary>
            <value>
            The global suppressions.
            </value>
        </member>
        <member name="P:StrongGrid.Client.InvalidEmails">
            <summary>
            Gets the InvalidEmails resource.
            </summary>
            <value>
            The invalid emails.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Lists">
            <summary>
            Gets the Lists resource.
            </summary>
            <value>
            The lists.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Mail">
            <summary>
            Gets the Mail resource.
            </summary>
            <value>
            The mail.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Segments">
            <summary>
            Gets the Segments resource.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="P:StrongGrid.Client.SenderIdentities">
            <summary>
            Gets the SenderIdentities resource.
            </summary>
            <value>
            The sender identities.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Settings">
            <summary>
            Gets the Settings resource.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:StrongGrid.Client.SpamReports">
            <summary>
            Gets the SpamReports resource.
            </summary>
            <value>
            The spam reports.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Statistics">
            <summary>
            Gets the Statistics resource.
            </summary>
            <value>
            The statistics.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Subusers">
            <summary>
            Gets the Subusers resource.
            </summary>
            <value>
            The subusers.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Suppressions">
            <summary>
            Gets the Suppressions resource.
            </summary>
            <value>
            The suppressions.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Teammates">
            <summary>
            Gets the Teammates resource.
            </summary>
            <value>
            The Teammates.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Templates">
            <summary>
            Gets the Templates resource.
            </summary>
            <value>
            The templates.
            </value>
        </member>
        <member name="P:StrongGrid.Client.UnsubscribeGroups">
            <summary>
            Gets the UnsubscribeGroups resource.
            </summary>
            <value>
            The unsubscribe groups.
            </value>
        </member>
        <member name="P:StrongGrid.Client.User">
            <summary>
            Gets the User resource.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Version">
            <summary>
            Gets the Version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:StrongGrid.Client.Whitelabel">
            <summary>
            Gets the Whitelabel resource.
            </summary>
            <value>
            The whitelabel.
            </value>
        </member>
        <member name="P:StrongGrid.Client.WebhookSettings">
            <summary>
            Gets the webhook settings resource.
            </summary>
            <value>
            The webhook settings.
            </value>
        </member>
        <member name="P:StrongGrid.Client.WebhookStats">
            <summary>
            Gets the WebhookStats resource.
            </summary>
            <value>
            The webhook stats.
            </value>
        </member>
        <member name="M:StrongGrid.Client.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Client"/> class.
            </summary>
            <param name="apiKey">Your SendGrid API Key</param>
        </member>
        <member name="M:StrongGrid.Client.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Client"/> class.
            </summary>
            <param name="apiKey">Your SendGrid API Key</param>
            <param name="proxy">Allows you to specify a proxy</param>
        </member>
        <member name="M:StrongGrid.Client.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Client" /> class.
            </summary>
            <param name="apiKey">Your SendGrid API Key</param>
            <param name="baseUri">Base SendGrid API Uri</param>
            <param name="apiVersion">The SendGrid API version. Please note: currently, only 'v3' is supported</param>
            <param name="httpClient">Allows you to inject your own HttpClient. This is useful, for example, to setup the HtppClient with a proxy</param>
        </member>
        <member name="M:StrongGrid.Client.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Client"/> class.
            </summary>
            <param name="username">Your username</param>
            <param name="password">Your password</param>
        </member>
        <member name="M:StrongGrid.Client.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Client"/> class.
            </summary>
            <param name="username">Your username</param>
            <param name="password">Your password</param>
            <param name="proxy">Allows you to specify a proxy</param>
        </member>
        <member name="M:StrongGrid.Client.#ctor(System.String,System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Client" /> class.
            </summary>
            <param name="username">Your username</param>
            <param name="password">Your password</param>
            <param name="baseUri">Base SendGrid API Uri</param>
            <param name="apiVersion">The SendGrid API version. Please note: currently, only 'v3' is supported</param>
            <param name="httpClient">Allows you to inject your own HttpClient. This is useful, for example, to setup the HtppClient with a proxy</param>
        </member>
        <member name="M:StrongGrid.Client.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:StrongGrid.Client"/> class.
            </summary>
        </member>
        <member name="M:StrongGrid.Client.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:StrongGrid.Client.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:StrongGrid.IClient">
            <summary>
            Interface for the SendGrid REST client
            </summary>
        </member>
        <member name="P:StrongGrid.IClient.AccessManagement">
            <summary>
            Gets the Access Management resource which allows you to control IP whitelisting
            </summary>
            <value>
            The access management.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Alerts">
            <summary>
            Gets the Alerts resource which allows you to receive notifications regarding your email usage or statistics.
            </summary>
            <value>
            The alerts.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.ApiKeys">
            <summary>
            Gets the API Keys resource which allows you to manage your API Keys.
            </summary>
            <value>
            The API keys.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Batches">
            <summary>
            Gets the Batches resource.
            </summary>
            <value>
            The batches.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Blocks">
            <summary>
            Gets the Blocks resource which allows you to manage blacked email addresses.
            </summary>
            <value>
            The blocks.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Bounces">
            <summary>
            Gets the Bounces resource which allows you to manage bounces.
            </summary>
            <value>
            The bounces.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Campaigns">
            <summary>
            Gets the Campaigns resource which allows you to manage your campaigns.
            </summary>
            <value>
            The campaigns.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Categories">
            <summary>
            Gets the Categories resource which allows you to manages your categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Contacts">
            <summary>
            Gets the Contacts resource which allows you to manage your contacts (also sometimes refered to as 'recipients').
            </summary>
            <value>
            The contacts.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.CustomFields">
            <summary>
            Gets the CustomFields resource which allows you to manage your custom fields.
            </summary>
            <value>
            The custom fields.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.GlobalSuppressions">
            <summary>
            Gets the GlobalSuppressions resource.
            </summary>
            <value>
            The global suppressions.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.InvalidEmails">
            <summary>
            Gets the InvalidEmails resource.
            </summary>
            <value>
            The invalid emails.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Lists">
            <summary>
            Gets the Lists resource.
            </summary>
            <value>
            The lists.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Mail">
            <summary>
            Gets the Mail resource.
            </summary>
            <value>
            The mail.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Segments">
            <summary>
            Gets the Segments resource.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.SenderIdentities">
            <summary>
            Gets the SenderIdentities resource.
            </summary>
            <value>
            The sender identities.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Settings">
            <summary>
            Gets the Settings resource.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.SpamReports">
            <summary>
            Gets the SpamReports resource.
            </summary>
            <value>
            The spam reports.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Statistics">
            <summary>
            Gets the Statistics resource.
            </summary>
            <value>
            The statistics.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Subusers">
            <summary>
            Gets the Subusers resource which allows you to manage subusers.
            </summary>
            <value>
            The subusers.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Suppressions">
            <summary>
            Gets the Suppressions resource.
            </summary>
            <value>
            The suppressions.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Teammates">
            <summary>
            Gets the Teammates resource.
            </summary>
            <value>
            The Teammates.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Templates">
            <summary>
            Gets the Templates resource.
            </summary>
            <value>
            The templates.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.UnsubscribeGroups">
            <summary>
            Gets the UnsubscribeGroups resource.
            </summary>
            <value>
            The unsubscribe groups.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.User">
            <summary>
            Gets the User resource.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Version">
            <summary>
            Gets the Version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.WebhookSettings">
            <summary>
            Gets the WebhookSettings resource.
            </summary>
            <value>
            The webhook settings.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.WebhookStats">
            <summary>
            Gets the WebhookStats resource.
            </summary>
            <value>
            The webhook stats.
            </value>
        </member>
        <member name="P:StrongGrid.IClient.Whitelabel">
            <summary>
            Gets the Whitelabel resource.
            </summary>
            <value>
            The whitelabel.
            </value>
        </member>
        <member name="T:StrongGrid.WebhookParser">
            <summary>
            Allows parsing of information posted from SendGrid.
            This parser supports both 'Events' and 'Inbound emails'.
            </summary>
        </member>
        <member name="M:StrongGrid.WebhookParser.ParseWebhookEventsAsync(System.IO.Stream)">
            <summary>
            Parses the webhook events asynchronously.
            </summary>
            <param name="stream">The stream.</param>
            <returns>An array of <see cref="T:StrongGrid.Model.Webhooks.Event">events</see>.</returns>
        </member>
        <member name="M:StrongGrid.WebhookParser.ParseWebhookEvents(System.String)">
            <summary>
            Parses the webhook events.
            </summary>
            <param name="requestBody">The content submitted by Sendgrid's WebHook.</param>
            <returns>An array of <see cref="T:StrongGrid.Model.Webhooks.Event">events</see>.</returns>
        </member>
        <member name="M:StrongGrid.WebhookParser.ParseInboundEmailWebhook(System.IO.Stream)">
            <summary>
            Parses the inbound email webhook.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:StrongGrid.Model.Webhooks.InboundEmail"/></returns>
        </member>
        <member name="T:StrongGrid.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:StrongGrid.Logging.ILog.Log(StrongGrid.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:StrongGrid.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:StrongGrid.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:StrongGrid.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:StrongGrid.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:StrongGrid.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:StrongGrid.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:StrongGrid.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:StrongGrid.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:StrongGrid.Logging.LogProvider.SetCurrentLogProvider(StrongGrid.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:StrongGrid.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:StrongGrid.Logging.LogProvider.SetCurrentLogProvider(StrongGrid.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:StrongGrid.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:StrongGrid.Logging.ILog"/></returns>
        </member>
        <member name="M:StrongGrid.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:StrongGrid.Logging.ILog"/></returns>
        </member>
        <member name="M:StrongGrid.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:StrongGrid.Logging.ILog"/></returns>
        </member>
        <member name="M:StrongGrid.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:StrongGrid.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:StrongGrid.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:StrongGrid.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:StrongGrid.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:StrongGrid.Model.AccessEntry">
            <summary>
            Activity Entry
            </summary>
        </member>
        <member name="P:StrongGrid.Model.AccessEntry.Allowed">
            <summary>
            Gets or sets a value indicating whether or not access was granted.
            </summary>
            <value>
              <c>true</c> if access was granted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessEntry.AuthorizationMethod">
            <summary>
            Gets or sets the authorization method
            </summary>
            <value>
            The authorization method.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessEntry.FirstAccessOn">
            <summary>
            Gets or sets the date this IP was fist used to access the account.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessEntry.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessEntry.LatestAccessOn">
            <summary>
            Gets or sets the date this IP was most recently used to access the account.
            </summary>
            <value>
            The user name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessEntry.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="T:StrongGrid.Model.AccessRequest">
            <summary>
            Access request details
            </summary>
        </member>
        <member name="P:StrongGrid.Model.AccessRequest.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessRequest.ScopeGroupName">
            <summary>
            Gets or sets the scope group name.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessRequest.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The user name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessRequest.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessRequest.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>
            The first name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AccessRequest.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>
            The last name.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Account">
            <summary>
            User account details
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Account.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Account.Reputation">
            <summary>
            Gets or sets the reputation.
            </summary>
            <value>
            The reputation.
            </value>
        </member>
        <member name="T:StrongGrid.Model.AddressWhitelistSettings">
            <summary>
            Settings controling withelisted email addresses
            </summary>
        </member>
        <member name="P:StrongGrid.Model.AddressWhitelistSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.AddressWhitelistSettings" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.AddressWhitelistSettings.EmailAddresses">
            <summary>
            Gets or sets the email addresses.
            </summary>
            <value>
            The email addresses.
            </value>
        </member>
        <member name="T:StrongGrid.Model.AggregateBy">
            <summary>
            Enumeration to indicate how to aggregate statistics
            </summary>
        </member>
        <member name="F:StrongGrid.Model.AggregateBy.None">
            <summary>
            No aggregation
            </summary>
        </member>
        <member name="F:StrongGrid.Model.AggregateBy.Day">
            <summary>
            Aggregate by day
            </summary>
        </member>
        <member name="F:StrongGrid.Model.AggregateBy.Week">
            <summary>
            Aggregate by week
            </summary>
        </member>
        <member name="F:StrongGrid.Model.AggregateBy.Month">
            <summary>
            Aggregate by month
            </summary>
        </member>
        <member name="T:StrongGrid.Model.Alert">
            <summary>
            Alerts allow you to specify an email address to receive notifications regarding your email usage or statistics.
            - Usage alerts allow you to set the threshold at which an alert will be sent.For example, if you want to be
            notified when you've used 90% of your current package's allotted emails, you would set the "percentage"
            parameter to 90.
            - Stats notifications allow you to set how frequently you would like to receive email
            statistics reports.For example, if you want to receive your stats notifications every day, simply set the
            "frequency" parameter to "daily". Stats notifications include data such as how many emails you sent each day,
            in addition to other email events such as bounces, drops, unsubscribes, etc.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Alert.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Alert.EmailTo">
            <summary>
            Gets or sets the email to.
            </summary>
            <value>
            The email to.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Alert.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Alert.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Alert.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Alert.ModifiedOn">
            <summary>
            Gets or sets the modified on.
            </summary>
            <value>
            The modified on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.AlertType">
            <summary>
            Enumeration to indicate the type of alert
            </summary>
        </member>
        <member name="F:StrongGrid.Model.AlertType.UsageLimit">
            <summary>
            The usage limit
            </summary>
        </member>
        <member name="F:StrongGrid.Model.AlertType.StatsNotification">
            <summary>
            The stats notification
            </summary>
        </member>
        <member name="T:StrongGrid.Model.ApiKey">
            <summary>
            API Keys allow you to generate an API Key credential which can be used for
            authentication with the SendGrid Web API.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.ApiKey.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ApiKey.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ApiKey.KeyId">
            <summary>
            Gets or sets the key identifier.
            </summary>
            <value>
            The key identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ApiKey.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Attachment">
            <summary>
            An email attachment
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Attachment.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Attachment.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Attachment.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Attachment.Disposition">
            <summary>
            Gets or sets the disposition.
            </summary>
            <value>
            The disposition.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Attachment.ContentId">
            <summary>
            Gets or sets the content identifier.
            </summary>
            <value>
            The content identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.BatchInfo">
            <summary>
            Information about a batch
            </summary>
        </member>
        <member name="P:StrongGrid.Model.BatchInfo.BatchId">
            <summary>
            Gets or sets the batch identifier.
            </summary>
            <value>
            The batch identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.BatchInfo.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="T:StrongGrid.Model.BatchStatus">
            <summary>
            Enumeration to indicate the status of a batch
            </summary>
        </member>
        <member name="F:StrongGrid.Model.BatchStatus.Paused">
            <summary>
            Batch has been paused
            </summary>
        </member>
        <member name="F:StrongGrid.Model.BatchStatus.Canceled">
            <summary>
            Batch has been canceled
            </summary>
        </member>
        <member name="T:StrongGrid.Model.BccSettings">
            <summary>
            BCC settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.BccSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.BccSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.BccSettings.EmailAddress">
            <summary>
            Gets or sets the email address.
            </summary>
            <value>
            The email address.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Block">
            <summary>
            Information about a blocked email address
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Block.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Block.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Block.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Block.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Bounce">
            <summary>
            Information about an email address that bounced
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Bounce.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Bounce.EmailAddress">
            <summary>
            Gets or sets the email address.
            </summary>
            <value>
            The email address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Bounce.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Bounce.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="T:StrongGrid.Model.BouncePurgeSettings">
            <summary>
            Controls how frequently hard and soft bounces are purged
            </summary>
        </member>
        <member name="P:StrongGrid.Model.BouncePurgeSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.BouncePurgeSettings" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.BouncePurgeSettings.HardBounces">
            <summary>
            Gets or sets the hard bounces.
            </summary>
            <value>
            The hard bounces.
            </value>
        </member>
        <member name="P:StrongGrid.Model.BouncePurgeSettings.SoftBounces">
            <summary>
            Gets or sets the soft bounces.
            </summary>
            <value>
            The soft bounces.
            </value>
        </member>
        <member name="T:StrongGrid.Model.BypassListManagementSettings">
            <summary>
            Allows you to bypass all unsubscribe groups and suppressions to ensure that the email is
            delivered to every single recipient. This should only be used in emergencies when it is
            absolutely necessary that every recipient receives your email. Ex: outage emails, or forgot
            password emails.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.BypassListManagementSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.BypassListManagementSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Campaign">
            <summary>
            A campaign requires a title to be created. In order to send or schedule the campaign,
            you will be required to provide a subject, sender ID, content (we suggest both html
            and plain text), and at least one list or segment ID.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Campaign.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.SenderId">
            <summary>
            Gets or sets the sender identifier.
            </summary>
            <value>
            The sender identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.Lists">
            <summary>
            Gets or sets the lists.
            </summary>
            <value>
            The lists.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.SuppressionGroupId">
            <summary>
            Gets or sets the suppression group identifier.
            </summary>
            <value>
            The suppression group identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.CustomUnsubscribeUrl">
            <summary>
            Gets or sets the custom unsubscribe URL.
            </summary>
            <value>
            The custom unsubscribe URL.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.IpPool">
            <summary>
            Gets or sets the ip pool.
            </summary>
            <value>
            The ip pool.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.HtmlContent">
            <summary>
            Gets or sets the HTML content.
            </summary>
            <value>
            The content of the HTML.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.TextContent">
            <summary>
            Gets or sets the plain text content.
            </summary>
            <value>
            The content of the text.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Campaign.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="T:StrongGrid.Model.CampaignStatus">
            <summary>
            Enumeration to indicate the status of a campaign
            </summary>
        </member>
        <member name="F:StrongGrid.Model.CampaignStatus.Draft">
            <summary>
            The campaign is in draft mode
            </summary>
        </member>
        <member name="F:StrongGrid.Model.CampaignStatus.Scheduled">
            <summary>
            The campaign has been scheduled
            </summary>
        </member>
        <member name="F:StrongGrid.Model.CampaignStatus.Sent">
            <summary>
            The campaign has been sent
            </summary>
        </member>
        <member name="T:StrongGrid.Model.ClickTrackingSettings">
            <summary>
            Allows you to track whether a recipient clicked a link in your email
            </summary>
        </member>
        <member name="P:StrongGrid.Model.ClickTrackingSettings.EnabledInHtmlContent">
            <summary>
            Gets or sets a value indicating whether click tracking is enabled in HTML content.
            </summary>
            <value>
            <c>true</c> if [enabled in HTML content]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ClickTrackingSettings.EnabledInTextContent">
            <summary>
            Gets or sets a value indicating whether click tracking is enabled in text content.
            </summary>
            <value>
            <c>true</c> if [enabled in text content]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:StrongGrid.Model.ConditionOperator">
            <summary>
            Enumeration to indicate a condition operator.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.ConditionOperator.Equal">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:StrongGrid.Model.ConditionOperator.NotEqual">
            <summary>
            Not equal
            </summary>
        </member>
        <member name="F:StrongGrid.Model.ConditionOperator.LessThan">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:StrongGrid.Model.ConditionOperator.GreatherThan">
            <summary>
            Greather than
            </summary>
        </member>
        <member name="F:StrongGrid.Model.ConditionOperator.Contains">
            <summary>
            Contains
            </summary>
        </member>
        <member name="T:StrongGrid.Model.Contact">
            <summary>
            A contact (also known as a recipient).
            </summary>
        </member>
        <member name="M:StrongGrid.Model.Contact.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Model.Contact"/> class.
            </summary>
        </member>
        <member name="M:StrongGrid.Model.Contact.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{StrongGrid.Model.Field})">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Model.Contact"/> class.
            </summary>
            <param name="email">The email.</param>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="customFields">The custom fields.</param>
        </member>
        <member name="P:StrongGrid.Model.Contact.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>
            The first name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.LastClickedOn">
            <summary>
            Gets or sets the last clicked on.
            </summary>
            <value>
            The last clicked on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.LastEmailedOn">
            <summary>
            Gets or sets the last emailed on.
            </summary>
            <value>
            The last emailed on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>
            The last name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.LastOpenedOn">
            <summary>
            Gets or sets the last opened on.
            </summary>
            <value>
            The last opened on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.ModifiedOn">
            <summary>
            Gets or sets the modified on.
            </summary>
            <value>
            The modified on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Contact.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
            <value>
            The custom fields.
            </value>
        </member>
        <member name="T:StrongGrid.Model.CustomFieldMetadata">
            <summary>
            Metadata about a custom field
            </summary>
            <seealso cref="T:StrongGrid.Model.FieldMetadata" />
        </member>
        <member name="P:StrongGrid.Model.CustomFieldMetadata.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.DnsRecord">
            <summary>
            DNS record
            </summary>
        </member>
        <member name="P:StrongGrid.Model.DnsRecord.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>
            The host.
            </value>
        </member>
        <member name="P:StrongGrid.Model.DnsRecord.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:StrongGrid.Model.DnsRecord.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:StrongGrid.Model.DnsRecord.IsValid">
            <summary>
            Gets or sets a value indicating whether the dns record is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:StrongGrid.Model.DomainValidation">
            <summary>
            Domain validation
            </summary>
        </member>
        <member name="P:StrongGrid.Model.DomainValidation.DomainId">
            <summary>
            Gets or sets the domain identifier.
            </summary>
            <value>
            The domain identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.DomainValidation.IsValid">
            <summary>
            Gets or sets a value indicating whether the domain is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.DomainValidation.ValidationResults">
            <summary>
            Gets or sets the validation results.
            </summary>
            <value>
            The validation results.
            </value>
        </member>
        <member name="T:StrongGrid.Model.DomainValidationResults">
            <summary>
            Domain validation results
            </summary>
        </member>
        <member name="P:StrongGrid.Model.DomainValidationResults.Mail">
            <summary>
            Gets or sets the mail.
            </summary>
            <value>
            The mail.
            </value>
        </member>
        <member name="P:StrongGrid.Model.DomainValidationResults.Dkim1">
            <summary>
            Gets or sets the dkim1.
            </summary>
            <value>
            The dkim1.
            </value>
        </member>
        <member name="P:StrongGrid.Model.DomainValidationResults.Dkim2">
            <summary>
            Gets or sets the dkim2.
            </summary>
            <value>
            The dkim2.
            </value>
        </member>
        <member name="P:StrongGrid.Model.DomainValidationResults.Spf">
            <summary>
            Gets or sets the SPF.
            </summary>
            <value>
            The SPF.
            </value>
        </member>
        <member name="T:StrongGrid.Model.EmailAddressSetting">
            <summary>
            Email address setting
            </summary>
        </member>
        <member name="P:StrongGrid.Model.EmailAddressSetting.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.EmailAddressSetting" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EmailAddressSetting.EmailAddress">
            <summary>
            Gets or sets the email address.
            </summary>
            <value>
            The email address.
            </value>
        </member>
        <member name="T:StrongGrid.Model.EnforcedTlsSettings">
            <summary>
            Enforce TLS settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.EnforcedTlsSettings.RequireTls">
            <summary>
            Gets or sets a value indicating whether [require TLS].
            </summary>
            <value>
              <c>true</c> if [require TLS]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EnforcedTlsSettings.RequireValidCertificate">
            <summary>
            Gets or sets a value indicating whether a valid certificate is required.
            </summary>
            <value>
            <c>true</c> if a valid certificate is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Error">
            <summary>
            An error
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Error.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Error.ErrorIndices">
            <summary>
            Gets or sets the error indices.
            </summary>
            <value>
            The error indices.
            </value>
        </member>
        <member name="T:StrongGrid.Model.EventWebhookSettings">
            <summary>
            Event Webhook settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.EventWebhookSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.GroupResubscribe">
            <summary>
            Gets or sets a value indicating whether the ASM Group Resubscribe notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.GroupUnsubscribe">
            <summary>
            Gets or sets a value indicating whether the ASM Group Unsubscribe notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Delivered">
            <summary>
            Gets or sets a value indicating whether the Delivered notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.SpamReport">
            <summary>
            Gets or sets a value indicating whether the SpamReport notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Bounce">
            <summary>
            Gets or sets a value indicating whether the Bounce notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Deferred">
            <summary>
            Gets or sets a value indicating whether the Deferred notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Unsubscribe">
            <summary>
            Gets or sets a value indicating whether the Unsubscribe notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Processed">
            <summary>
            Gets or sets a value indicating whether the Processed notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Open">
            <summary>
            Gets or sets a value indicating whether the Open notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Click">
            <summary>
            Gets or sets a value indicating whether the Click notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.EventWebhookSettings.Dropped">
            <summary>
            Gets or sets a value indicating whether the Dropped notification is sent
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Field">
            <summary>
            A field
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Field.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Field.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Field`1">
            <summary>
            A field with typed content
            </summary>
            <typeparam name="T">The type of data contained in this field</typeparam>
        </member>
        <member name="M:StrongGrid.Model.Field`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Model.Field`1"/> class.
            </summary>
        </member>
        <member name="M:StrongGrid.Model.Field`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Model.Field`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:StrongGrid.Model.Field`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:StrongGrid.Model.FieldMetadata">
            <summary>
            Metadata about a field
            </summary>
        </member>
        <member name="P:StrongGrid.Model.FieldMetadata.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.FieldMetadata.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:StrongGrid.Model.FieldType">
            <summary>
            Enumeration to indicate the type of a field
            </summary>
        </member>
        <member name="F:StrongGrid.Model.FieldType.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="F:StrongGrid.Model.FieldType.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:StrongGrid.Model.FieldType.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="T:StrongGrid.Model.FooterGlobalSettings">
            <summary>
            Footer global settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.FooterGlobalSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.FooterGlobalSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.FooterGlobalSettings.HtmlContent">
            <summary>
            Gets or sets the HTML content.
            </summary>
            <value>
            The content of the HTML.
            </value>
        </member>
        <member name="P:StrongGrid.Model.FooterGlobalSettings.TextContent">
            <summary>
            Gets or sets the plain text content.
            </summary>
            <value>
            The content of the text.
            </value>
        </member>
        <member name="T:StrongGrid.Model.FooterSettings">
            <summary>
            The footer that you would like appended to the bottom of every email.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.FooterSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.FooterSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.FooterSettings.TextContent">
            <summary>
            Gets or sets the content of the text.
            </summary>
            <value>
            The content of the text.
            </value>
        </member>
        <member name="P:StrongGrid.Model.FooterSettings.HtmlContent">
            <summary>
            Gets or sets the content of the HTML.
            </summary>
            <value>
            The content of the HTML.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Frequency">
            <summary>
            Enumeration to indicate frequency
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Frequency.Hourly">
            <summary>
            Hourly
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Frequency.Daily">
            <summary>
            Daily
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Frequency.Weekly">
            <summary>
            Weekly
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Frequency.Monthly">
            <summary>
            Monthly
            </summary>
        </member>
        <member name="T:StrongGrid.Model.GlobalSetting">
            <summary>
            A global setting
            </summary>
        </member>
        <member name="P:StrongGrid.Model.GlobalSetting.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.GlobalSetting" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GlobalSetting.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GlobalSetting.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GlobalSetting.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:StrongGrid.Model.GlobalSuppression">
            <summary>
            Information about a global suppression
            </summary>
        </member>
        <member name="P:StrongGrid.Model.GlobalSuppression.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GlobalSuppression.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.GoogleAnalyticsGlobalSettings">
            <summary>
            Google Analytics global settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.GoogleAnalyticsGlobalSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.GoogleAnalyticsGlobalSettings" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GoogleAnalyticsGlobalSettings.UtmSource">
            <summary>
            Gets or sets the utm source.
            </summary>
            <value>
            The utm source.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GoogleAnalyticsGlobalSettings.UtmMedium">
            <summary>
            Gets or sets the utm medium.
            </summary>
            <value>
            The utm medium.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GoogleAnalyticsGlobalSettings.UtmTerm">
            <summary>
            Gets or sets the utm term.
            </summary>
            <value>
            The utm term.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GoogleAnalyticsGlobalSettings.UtmContent">
            <summary>
            Gets or sets the content of the utm.
            </summary>
            <value>
            The content of the utm.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GoogleAnalyticsGlobalSettings.UtmCampaign">
            <summary>
            Gets or sets the utm campaign.
            </summary>
            <value>
            The utm campaign.
            </value>
        </member>
        <member name="T:StrongGrid.Model.GoogleAnalyticsSettings">
            <summary>
            Allows you to enable tracking provided by Google Analytics.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.GoogleAnalyticsSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.GoogleAnalyticsSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.GoogleAnalyticsSettings.SubstitutionTag">
            <summary>
            Gets or sets the substitution tag.
            </summary>
            <value>
            The substitution tag.
            </value>
        </member>
        <member name="T:StrongGrid.Model.ImportResult">
            <summary>
            The result of importing a group of contacts
            </summary>
        </member>
        <member name="P:StrongGrid.Model.ImportResult.ErrorCount">
            <summary>
            Gets or sets the error count.
            </summary>
            <value>
            The error count.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ImportResult.ErrorIndices">
            <summary>
            Gets or sets the error indices.
            </summary>
            <value>
            The error indices.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ImportResult.NewCount">
            <summary>
            Gets or sets the new count.
            </summary>
            <value>
            The new count.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ImportResult.PersistedRecipients">
            <summary>
            Gets or sets the persisted recipients.
            </summary>
            <value>
            The persisted recipients.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ImportResult.UpdatedCount">
            <summary>
            Gets or sets the updated count.
            </summary>
            <value>
            The updated count.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ImportResult.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="T:StrongGrid.Model.InvalidEmail">
            <summary>
            An invalid email address
            </summary>
        </member>
        <member name="P:StrongGrid.Model.InvalidEmail.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.InvalidEmail.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="P:StrongGrid.Model.InvalidEmail.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.IpValidation">
            <summary>
            IP validation
            </summary>
        </member>
        <member name="P:StrongGrid.Model.IpValidation.IpId">
            <summary>
            Gets or sets the ip identifier.
            </summary>
            <value>
            The ip identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.IpValidation.IsValid">
            <summary>
            Gets or sets a value indicating whether the IP is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.IpValidation.ValidationResults">
            <summary>
            Gets or sets the validation results.
            </summary>
            <value>
            The validation results.
            </value>
        </member>
        <member name="T:StrongGrid.Model.IpValidationResults">
            <summary>
            IP validation results
            </summary>
        </member>
        <member name="P:StrongGrid.Model.IpValidationResults.ARecord">
            <summary>
            Gets or sets a record.
            </summary>
            <value>
            a record.
            </value>
        </member>
        <member name="T:StrongGrid.Model.LinkValidation">
            <summary>
            Link validation
            </summary>
        </member>
        <member name="P:StrongGrid.Model.LinkValidation.LinkId">
            <summary>
            Gets or sets the link identifier.
            </summary>
            <value>
            The link identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.LinkValidation.IsValid">
            <summary>
            Gets or sets a value indicating whether this link is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.LinkValidation.ValidationResults">
            <summary>
            Gets or sets the validation results.
            </summary>
            <value>
            The validation results.
            </value>
        </member>
        <member name="T:StrongGrid.Model.LinkValidationResults">
            <summary>
            Link validation results
            </summary>
        </member>
        <member name="P:StrongGrid.Model.LinkValidationResults.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>
            The domain.
            </value>
        </member>
        <member name="P:StrongGrid.Model.LinkValidationResults.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="T:StrongGrid.Model.List">
            <summary>
            A list of contacts
            </summary>
        </member>
        <member name="P:StrongGrid.Model.List.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.List.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.List.RecipientCount">
            <summary>
            Gets or sets the recipient count.
            </summary>
            <value>
            The recipient count.
            </value>
        </member>
        <member name="T:StrongGrid.Model.LogicalOperator">
            <summary>
            Enumeration to indicate a logical operator
            </summary>
        </member>
        <member name="F:StrongGrid.Model.LogicalOperator.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:StrongGrid.Model.LogicalOperator.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:StrongGrid.Model.LogicalOperator.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:StrongGrid.Model.MailAddress">
            <summary>
            The adress for a mail recipient, including the name and email address
            </summary>
        </member>
        <member name="P:StrongGrid.Model.MailAddress.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailAddress.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:StrongGrid.Model.MailAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Model.MailAddress" /> class.
            </summary>
            <param name="email">The email.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:StrongGrid.Model.MailContent">
            <summary>
            The content of a mail. When sending "multi-part" emails, your message can have
            multiple parts such as HTML and plain text for example.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.MailContent.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailContent.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:StrongGrid.Model.MailContent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Model.MailContent"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:StrongGrid.Model.MailPersonalization">
            <summary>
            This object can be thought of as an envelope - it defines who should receive an individual
            message and how that message should be handled. For more information, please see our
            documentation on Personalizations. Parameters in personalizations will override the parameters
            of the same name from the message level.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.MailPersonalization.To">
            <summary>
            Gets or sets an array of recipients.
            Each <see cref="T:StrongGrid.Model.MailAddress"/> object within this array may contain the recipient’s
            name, but must always contain the recipient’s email.
            </summary>
            <value>
            To.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailPersonalization.Cc">
            <summary>
            Gets or sets an array of recipients who will receive a copy of your email.
            Each <see cref="T:StrongGrid.Model.MailAddress"/> object within this array may contain the recipient’s
            name, but must always contain the recipient’s email.
            </summary>
            <value>
            The cc.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailPersonalization.Bcc">
            <summary>
            Gets or sets an array of recipients who will receive a blind carbon copy of your email.
            Each <see cref="T:StrongGrid.Model.MailAddress"/> object within this array may contain the recipient’s
            name, but must always contain the recipient’s email.
            </summary>
            <value>
            The BCC.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailPersonalization.Subject">
            <summary>
            Gets or sets the subject line of your email.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailPersonalization.Headers">
            <summary>
            Gets or sets the headers which allow you to specify specific handling instructions for your email.
            </summary>
            <value>
            The headers.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailPersonalization.Substitutions">
            <summary>
            Gets or sets the substitutions.
            </summary>
            <value>
            The substitutions.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailPersonalization.CustomArguments">
            <summary>
            Gets or sets the custom arguments.
            </summary>
            <value>
            The custom arguments.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailPersonalization.SendAt">
            <summary>
            Gets or sets the timestamp allowing you to specify when you want your email to be sent from SendGrid.
            </summary>
            <value>
            The send at.
            </value>
        </member>
        <member name="T:StrongGrid.Model.MailSettings">
            <summary>
            Mail settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.MailSettings.Bcc">
            <summary>
            Gets or sets the BCC.
            </summary>
            <value>
            The BCC.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailSettings.BypassListManagement">
            <summary>
            Gets or sets the bypass list management.
            </summary>
            <value>
            The bypass list management.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailSettings.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
            <value>
            The footer.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailSettings.SandboxMode">
            <summary>
            Gets or sets the sandbox mode.
            </summary>
            <value>
            The sandbox mode.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MailSettings.SpamChecking">
            <summary>
            Gets or sets the spam checking.
            </summary>
            <value>
            The spam checking.
            </value>
        </member>
        <member name="T:StrongGrid.Model.MonitorSettings">
            <summary>
            Monitor settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.MonitorSettings.EmailAddress">
            <summary>
            Gets or sets the email address.
            </summary>
            <value>
            The email address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.MonitorSettings.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            Interval of emails between samples
            </value>
        </member>
        <member name="T:StrongGrid.Model.NewRelicSettings">
            <summary>
            New Relic settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.NewRelicSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.NewRelicSettings" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.NewRelicSettings.LicenseKey">
            <summary>
            Gets or sets the license key.
            </summary>
            <value>
            The license key.
            </value>
        </member>
        <member name="T:StrongGrid.Model.OpenTrackingSettings">
            <summary>
            Allows you to track whether the email was opened or not, by including a single pixel image
            in the body of the content. When the pixel is loaded, we can log that the email was opened.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.OpenTrackingSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.OpenTrackingSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.OpenTrackingSettings.SubstitutionTag">
            <summary>
            Gets or sets the substitution tag.
            </summary>
            <value>
            The substitution tag.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SandboxModeSettings">
            <summary>
            This allows you to send a test email to ensure that your request body is valid and formatted correctly.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SandboxModeSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.SandboxModeSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SearchCondition">
            <summary>
            Search condition
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SearchCondition.Field">
            <summary>
            Gets or sets the field.
            </summary>
            <value>
            The field.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SearchCondition.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SearchCondition.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SearchCondition.LogicalOperator">
            <summary>
            Gets or sets the logical operator.
            </summary>
            <value>
            The logical operator.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Segment">
            <summary>
            Segment
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Segment.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Segment.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Segment.ListId">
            <summary>
            Gets or sets the list identifier.
            </summary>
            <value>
            The list identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Segment.Conditions">
            <summary>
            Gets or sets the conditions.
            </summary>
            <value>
            The conditions.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Segment.RecipientCount">
            <summary>
            Gets or sets the recipient count.
            </summary>
            <value>
            The recipient count.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SenderIdentity">
            <summary>
            Sender identity
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.NickName">
            <summary>
            Gets or sets the name of the nick.
            </summary>
            <value>
            The name of the nick.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.ReplyTo">
            <summary>
            Gets or sets the reply to.
            </summary>
            <value>
            The reply to.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.Address1">
            <summary>
            Gets or sets the address1.
            </summary>
            <value>
            The address1.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.Address2">
            <summary>
            Gets or sets the address2.
            </summary>
            <value>
            The address2.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>
            The city.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.Zip">
            <summary>
            Gets or sets the zip.
            </summary>
            <value>
            The zip.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>
            The country.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.Verification">
            <summary>
            Gets or sets the verification.
            </summary>
            <value>
            The verification.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.Locked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.SenderIdentity"/> is locked.
            </summary>
            <value>
              <c>true</c> if locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SenderIdentity.ModifiedOn">
            <summary>
            Gets or sets the modified on.
            </summary>
            <value>
            The modified on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SpamCheckingSettings">
            <summary>
            Spam checking settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SpamCheckingSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.SpamCheckingSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SpamCheckingSettings.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
            <value>
            The threshold.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SpamCheckingSettings.PostToUrl">
            <summary>
            Gets or sets the post to URL.
            </summary>
            <value>
            The post to URL.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SpamCheckSettings">
            <summary>
            Spam check settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SpamCheckSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.SpamCheckSettings" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SpamCheckSettings.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
            <value>
            The threshold.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SpamCheckSettings.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SpamReport">
            <summary>
            Spam report
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SpamReport.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SpamReport.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SpamReport.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Stat">
            <summary>
            Stat
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Stat.Metrics">
            <summary>
            Gets or sets the metrics.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Stat.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Stat.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Statistic">
            <summary>
            Statistic
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Statistic.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Statistic.Stats">
            <summary>
            Gets or sets the stats.
            </summary>
            <value>
            The stats.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SubscriptionSettings">
            <summary>
            Subscription settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.SubscriptionSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionSettings.LandingPageHtml">
            <summary>
            Gets or sets the landing page HTML.
            </summary>
            <value>
            The landing page HTML.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionSettings.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionSettings.ReplacementTag">
            <summary>
            Gets or sets the replacement tag.
            </summary>
            <value>
            The replacement tag.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionSettings.HtmlContent">
            <summary>
            Gets or sets the content of the HTML.
            </summary>
            <value>
            The content of the HTML.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionSettings.TextContent">
            <summary>
            Gets or sets the content of the text.
            </summary>
            <value>
            The content of the text.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SubscriptionTrackingSettings">
            <summary>
            Subscription tracking settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionTrackingSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.SubscriptionTrackingSettings"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionTrackingSettings.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionTrackingSettings.Html">
            <summary>
            Gets or sets the HTML.
            </summary>
            <value>
            The HTML.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SubscriptionTrackingSettings.SubstitutionTag">
            <summary>
            Gets or sets the substitution tag.
            </summary>
            <value>
            The substitution tag.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Subuser">
            <summary>
            Subusers are sendgrid users which exist as children of the main parent account.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Subuser.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Subuser.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Subuser.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Subuser.EmailAddress">
            <summary>
            Gets or sets the email address.
            </summary>
            <value>
            The email address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Subuser.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the subuser is disabled.
            </summary>
            <value>
              <c>true</c> if this instance is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Subuser.Ips">
            <summary>
            Gets or sets the ip addresses allocated to this subuser.
            </summary>
            <value>
            The ip addresses.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Suppression">
            <summary>
            Information about a suppression
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Suppression.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Suppression.GroupId">
            <summary>
            Gets or sets the suppression group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Suppression.GroupName">
            <summary>
            Gets or sets the name of the suppression group.
            </summary>
            <value>
            The name of the suppression group.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Suppression.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.SuppressionGroup">
            <summary>
            Suppression Groups allow you to segment your email by a grouping which is most often defined
            by the types of email. Example: Receipts, Deals emails, and notification.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.SuppressionGroup.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SuppressionGroup.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SuppressionGroup.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SuppressionGroup.IsDefault">
            <summary>
            Gets or sets a value indicating whether this instance is default.
            </summary>
            <value>
            <c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.SuppressionGroup.UnsubscribesCount">
            <summary>
            Gets or sets a value indicating the number of email addresses in this suppression group.
            </summary>
            <value>
            The number of email addresses in this suppression group.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Teammate">
            <summary>
            Teammate.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Teammate.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>
            The first name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>
            The last name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.UserType">
            <summary>
            Gets or sets the user type.
            </summary>
            <value>
            The user type.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.IsAdmin">
            <summary>
            Gets or sets a value indicating whether a teammate has admin permissions.
            </summary>
            <value>
            The flag that indicates if a teammate has admin permissions.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
            <value>
            The phone.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.Website">
            <summary>
            Gets or sets the website.
            </summary>
            <value>
            The website.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.Company">
            <summary>
            Gets or sets the company.
            </summary>
            <value>
            The company.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.AddressLine1">
            <summary>
            Gets or sets the address line 1.
            </summary>
            <value>
            The address line 1.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.AddressLine2">
            <summary>
            Gets or sets the address line 2.
            </summary>
            <value>
            The address line 2.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>
            The city.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>
            The country.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.ZipCode">
            <summary>
            Gets or sets the zip code.
            </summary>
            <value>
            The zip code.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Teammate.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="T:StrongGrid.Model.TeammateInvitation">
            <summary>
            Teammate.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.TeammateInvitation.Id">
            <summary>
            Gets or sets the invitation ID.
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TeammateInvitation.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TeammateInvitation.Scopes">
            <summary>
            Gets or sets the scopes.
            </summary>
            <value>
            The scopes.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TeammateInvitation.IsAdmin">
            <summary>
            Gets or sets a value indicating whether a teammate has admin permissions.
            </summary>
            <value>
            The flag that indicates if a teammate has admin permissions.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Template">
            <summary>
            Templates are re-usable email layouts, that may be created and interacted with through the API.
            These are intended to be a specific type of message, such as ‘Weekly Product Update’.
            Templates may have multiple versions with different content, these may be changed and activated
            through the API. These allow split testing, multiple languages of the same template, etc.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Template.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Template.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Template.Versions">
            <summary>
            Gets or sets the versions.
            </summary>
            <value>
            The versions.
            </value>
        </member>
        <member name="T:StrongGrid.Model.TemplateSettings">
            <summary>
            Template settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.TemplateSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:StrongGrid.Model.TemplateSettings" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TemplateSettings.HtmlContent">
            <summary>
            Gets or sets the content of the HTML.
            </summary>
            <value>
            The content of the HTML.
            </value>
        </member>
        <member name="T:StrongGrid.Model.TemplateVersion">
            <summary>
            Template version
            </summary>
        </member>
        <member name="P:StrongGrid.Model.TemplateVersion.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TemplateVersion.TemplateId">
            <summary>
            Gets or sets the template identifier.
            </summary>
            <value>
            The template identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TemplateVersion.IsActive">
            <summary>
            Gets or sets a value indicating whether this template version is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TemplateVersion.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TemplateVersion.HtmlContent">
            <summary>
            Gets or sets the HTML content.
            </summary>
            <value>
            The content of the HTML.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TemplateVersion.TextContent">
            <summary>
            Gets or sets the plain text content.
            </summary>
            <value>
            The content of the text.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TemplateVersion.UpdatedOn">
            <summary>
            Gets or sets the updated on.
            </summary>
            <value>
            The updated on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.TrackingSettings">
            <summary>
            Tracking settings
            </summary>
        </member>
        <member name="P:StrongGrid.Model.TrackingSettings.ClickTracking">
            <summary>
            Gets or sets the click tracking.
            </summary>
            <value>
            The click tracking.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TrackingSettings.OpenTracking">
            <summary>
            Gets or sets the open tracking.
            </summary>
            <value>
            The open tracking.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TrackingSettings.SubscriptionTracking">
            <summary>
            Gets or sets the subscription tracking.
            </summary>
            <value>
            The subscription tracking.
            </value>
        </member>
        <member name="P:StrongGrid.Model.TrackingSettings.GoogleAnalytics">
            <summary>
            Gets or sets the google analytics.
            </summary>
            <value>
            The google analytics.
            </value>
        </member>
        <member name="T:StrongGrid.Model.UnsubscribeOptions">
            <summary>
            Unsubscribe options
            </summary>
        </member>
        <member name="P:StrongGrid.Model.UnsubscribeOptions.GroupId">
            <summary>
            Gets or sets the group identifier.
            </summary>
            <value>
            The group identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UnsubscribeOptions.GroupsToDisplay">
            <summary>
            Gets or sets the groups to display.
            </summary>
            <value>
            The groups to display.
            </value>
        </member>
        <member name="T:StrongGrid.Model.UserCredits">
            <summary>
            User credits
            </summary>
        </member>
        <member name="P:StrongGrid.Model.UserCredits.Remaining">
            <summary>
            Gets or sets the remaining.
            </summary>
            <value>
            The remaining.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserCredits.Total">
            <summary>
            Gets or sets the total.
            </summary>
            <value>
            The total.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserCredits.Overage">
            <summary>
            Gets or sets the overage.
            </summary>
            <value>
            The overage.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserCredits.Used">
            <summary>
            Gets or sets the used.
            </summary>
            <value>
            The used.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserCredits.LastReset">
            <summary>
            Gets or sets the last reset.
            </summary>
            <value>
            The last reset.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserCredits.NextReset">
            <summary>
            Gets or sets the next reset.
            </summary>
            <value>
            The next reset.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserCredits.ResetFrequency">
            <summary>
            Gets or sets the reset frequency.
            </summary>
            <value>
            The reset frequency.
            </value>
        </member>
        <member name="T:StrongGrid.Model.UserProfile">
            <summary>
            User profile
            </summary>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>
            The city.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.Company">
            <summary>
            Gets or sets the company.
            </summary>
            <value>
            The company.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>
            The country.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>
            The first name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>
            The last name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
            <value>
            The phone.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.Website">
            <summary>
            Gets or sets the website.
            </summary>
            <value>
            The website.
            </value>
        </member>
        <member name="P:StrongGrid.Model.UserProfile.ZipCode">
            <summary>
            Gets or sets the zip code.
            </summary>
            <value>
            The zip code.
            </value>
        </member>
        <member name="T:StrongGrid.Model.ValidationResult">
            <summary>
            Validation result
            </summary>
        </member>
        <member name="P:StrongGrid.Model.ValidationResult.IsValid">
            <summary>
            Gets or sets a value indicating whetherthis validation is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.ValidationResult.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="T:StrongGrid.Model.VerificationStatus">
            <summary>
            Verification status
            </summary>
        </member>
        <member name="P:StrongGrid.Model.VerificationStatus.IsCompleted">
            <summary>
            Gets or sets a value indicating whether this instance is completed.
            </summary>
            <value>
            <c>true</c> if this instance is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.VerificationStatus.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="T:StrongGrid.Model.WhitelabelDomain">
            <summary>
            A domain whitelabel consists of a subdomain and domain that will be used to set the
            appropriate DKIM, SPF, and Return-Path. There is an option to allow SendGrid to manage
            security or the customers may manage their own DNS records. For customers using the
            manual security option, they will need to create the appropriate MX, DKIM, and SPF
            records with their hosting provider. With automatic security, the customer will just
            need to create a few CNAMEs to SendGrid, and SendGrid will manage the MX, DKIM and SPF
            records.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Whitelabel/domains.html
            </remarks>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>
            The domain.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.Subdomain">
            <summary>
            Gets or sets the subdomain.
            </summary>
            <value>
            The subdomain.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.IpAddresses">
            <summary>
            Gets or sets the ip addresses.
            </summary>
            <value>
            The ip addresses.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.IsCustomSpf">
            <summary>
            Gets or sets a value indicating whether this instance is custom SPF.
            </summary>
            <value>
            <c>true</c> if this instance is custom SPF; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.IsDefault">
            <summary>
            Gets or sets a value indicating whether this instance is default.
            </summary>
            <value>
            <c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.IsLegacy">
            <summary>
            Gets or sets a value indicating whether this instance is legacy.
            </summary>
            <value>
              <c>true</c> if this instance is legacy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.IsAutomaticSecurity">
            <summary>
            Gets or sets a value indicating whether this instance is automatic security.
            </summary>
            <value>
            <c>true</c> if this instance is automatic security; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.IsValid">
            <summary>
            Gets or sets a value indicating whether this white label domain is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomain.DNS">
            <summary>
            Gets or sets the DNS.
            </summary>
            <value>
            The DNS.
            </value>
        </member>
        <member name="T:StrongGrid.Model.WhitelabelDomainDns">
            <summary>
            Whitelabel domain DNS
            </summary>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomainDns.MailCName">
            <summary>
            Gets or sets the name of the mail c.
            </summary>
            <value>
            The name of the mail c.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomainDns.MailServer">
            <summary>
            Gets or sets the mail server.
            </summary>
            <value>
            The mail server.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomainDns.Spf">
            <summary>
            Gets or sets the SPF.
            </summary>
            <value>
            The SPF.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomainDns.Dkim1">
            <summary>
            Gets or sets the dkim1.
            </summary>
            <value>
            The dkim1.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelDomainDns.Dkim2">
            <summary>
            Gets or sets the dkim2.
            </summary>
            <value>
            The dkim2.
            </value>
        </member>
        <member name="T:StrongGrid.Model.WhitelabelIp">
            <summary>
            A IP whitelabel consists of a subdomain and domain that will be used to generate a
            reverse DNS record for a given IP. Once SendGrid has verified that the customer has
            created the appropriate A record for their IP, SendGrid will create the appropriate
            reverse DNS record for the IP.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Whitelabel/ips.html
            </remarks>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelIp.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelIp.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelIp.RDNS">
            <summary>
            Gets or sets the RDNS.
            </summary>
            <value>
            The RDNS.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelIp.Subdomain">
            <summary>
            Gets or sets the subdomain.
            </summary>
            <value>
            The subdomain.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelIp.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>
            The domain.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelIp.IsValid">
            <summary>
            Gets or sets a value indicating whether this white label IP is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelIp.IsLegacy">
            <summary>
            Gets or sets a value indicating whether this instance is legacy.
            </summary>
            <value>
              <c>true</c> if this instance is legacy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelIp.ARecord">
            <summary>
            Gets or sets a record.
            </summary>
            <value>
            a record.
            </value>
        </member>
        <member name="T:StrongGrid.Model.WhitelabelLink">
            <summary>
            A link whitelabel consists of a subdomain and domain that will be used to rewrite links
            in mail messages. Our customer will be asked to create a couple CNAME records for the
            links to be rewritten to and for us to verify that they are the domain owners.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Whitelabel/links.html
            </remarks>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>
            The domain.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.Subdomain">
            <summary>
            Gets or sets the subdomain.
            </summary>
            <value>
            The subdomain.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.IsDefault">
            <summary>
            Gets or sets a value indicating whether this instance is default.
            </summary>
            <value>
              <c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.IsValid">
            <summary>
            Gets or sets a value indicating whether this withe label link is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.IsLegacy">
            <summary>
            Gets or sets a value indicating whether this instance is legacy.
            </summary>
            <value>
              <c>true</c> if this instance is legacy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLink.DNS">
            <summary>
            Gets or sets the DNS.
            </summary>
            <value>
            The DNS.
            </value>
        </member>
        <member name="T:StrongGrid.Model.WhitelabelLinkDns">
            <summary>
            Whitelabel link DNS
            </summary>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLinkDns.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>
            The domain.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelabelLinkDns.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="T:StrongGrid.Model.WhitelistedIp">
            <summary>
             IP that can access the user's account through the web, API, or mail send.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.WhitelistedIp.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelistedIp.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelistedIp.CreatedOn">
            <summary>
            Gets or sets the created on.
            </summary>
            <value>
            The created on.
            </value>
        </member>
        <member name="P:StrongGrid.Model.WhitelistedIp.ModifiedOn">
            <summary>
            Gets or sets the modified on.
            </summary>
            <value>
            The modified on.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.BouncedEvent">
            <summary>
            Receiving server could not or would not accept message.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.DeliveryEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.BouncedEvent.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.BouncedEvent.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.BouncedEvent.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.ClickEvent">
            <summary>
            Recipient clicked on a link within the message.
            You need to enable Click Tracking for getting this type of event.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.EngagementEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.ClickEvent.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.ClickEvent.UrlOffset">
            <summary>
            Gets or sets the URL offset.
            </summary>
            <value>
            The URL offset.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.ClickEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.ClickEvent.Newsletter">
            <summary>
            Gets or sets the newsletter.
            </summary>
            <value>
            The newsletter.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.DeferredEvent">
            <summary>
            Recipient’s email server temporarily rejected message.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.DeliveryEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeferredEvent.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeferredEvent.Attempt">
            <summary>
            Gets or sets the attempt.
            </summary>
            <value>
            The attempt.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeferredEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeferredEvent.Newsletter">
            <summary>
            Gets or sets the newsletter.
            </summary>
            <value>
            The newsletter.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.DeliveredEvent">
            <summary>
            Message has been successfully delivered to the receiving server.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.DeliveryEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeliveredEvent.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeliveredEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeliveredEvent.Newsletter">
            <summary>
            Gets or sets the newsletter.
            </summary>
            <value>
            The newsletter.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.DeliveryEvent">
            <summary>
            An event  related to the delivery of a message.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.Event" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeliveryEvent.SmtpId">
            <summary>
            Gets or sets the SMTP identifier attached to the message by the originating system
            </summary>
            <value>
            The SMTP identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeliveryEvent.Tls">
            <summary>
            Gets or sets a value indicating whether or not TLS was used when sending the email.
            </summary>
            <value>
              <c>true</c> if TLS was used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DeliveryEvent.CertificateValidationError">
            <summary>
            Gets or sets a value indicating whether there was a certificate error on the receiving side.
            </summary>
            <value>
            <c>true</c> if there was a certificate error on the receiving side; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.DroppedEvent">
            <summary>
            Message was not sent.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.DeliveryEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.DroppedEvent.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <remarks>
            You may see the following drop reasons:
            - Invalid SMTPAPI header
            - Spam Content (if spam checker app enabled)
            - Unsubscribed Address
            - Bounced Address
            - Spam Reporting Address
            - Invalid
            - Recipient List over Package Quota
            </remarks>
            <value>
            The reason.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.EngagementEvent">
            <summary>
            User account details
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.EngagementEvent.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>
            The user agent.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.Event">
            <summary>
            A webhook event
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.EventType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.Email">
            <summary>
            Gets or sets the email addres of the intended recipient.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.IpAddress">
            <summary>
            Gets or sets the ip address that was used to send the email.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.InternalEventId">
            <summary>
            Gets or sets the internal event identifier.
            </summary>
            <value>
            The internal event identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.InternalMessageId">
            <summary>
            Gets or sets the internal message identifier.
            </summary>
            <value>
            The internal message identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.MarketingCampaignId">
            <summary>
            Gets or sets the marketing campaign identifier.
            </summary>
            <value>
            The marketing campaign identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.MarketingCampaignName">
            <summary>
            Gets or sets the name of the marketing campaign.
            </summary>
            <value>
            The name of the marketing campaign.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.MarketingCampaignVersion">
            <summary>
            Gets or sets the marketing campaign version.
            </summary>
            <value>
            The marketing campaign version.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.MarketingCampaignSplitId">
            <summary>
            Gets or sets the marketing campaign split identifier.
            </summary>
            <value>
            The marketing campaign split identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            Theuser identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Event.UniqueArguments">
            <summary>
            Gets the unique arguments.
            </summary>
            <value>
            The unique arguments.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.EventType">
            <summary>
            Enumeration to indicate the type of webhook event
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.Processed">
            <summary>
            Message has been received and is ready to be delivered
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.Dropped">
            <summary>
            You may see the following drop reasons:
                - Invalid SMTPAPI header,
                - Spam Content (if spam checker app enabled),
                - Unsubscribed Address,
                - Bounced Address,
                - Spam Reporting Address,
                - Invalid,
                - Recipient List over Package Quota
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.Delivered">
            <summary>
            Message has been successfully delivered to the receiving server.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.Deferred">
            <summary>
            Recipient’s email server temporarily rejected message.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.Bounce">
            <summary>
            Receiving server could not or would not accept message.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.Open">
            <summary>
            Recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.Click">
            <summary>
            Recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.SpamReport">
            <summary>
            Recipient marked message as spam.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.Unsubscribe">
            <summary>
            Recipient clicked on the 'Opt Out of All Emails' link (available after clicking the message's subscription management link).
            You need to enable Subscription Tracking for getting this type of event.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.GroupUnsubscribe">
            <summary>
            Recipient unsubscribed from specific group, by either direct link or updating preferences.
            You need to enable Subscription Tracking for getting this type of event.
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.EventType.GroupResubscribe">
            <summary>
            Recipient resubscribes to specific group by updating preferences.
            You need to enable Subscription Tracking for getting this type of event.
            </summary>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.GroupResubscribeEvent">
            <summary>
            Recipient resubscribes to specific group by updating preferences.
            You need to enable Subscription Tracking for getting this type of event.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.EngagementEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.GroupResubscribeEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.GroupUnsubscribeEvent">
            <summary>
            Recipient unsubscribed from specific group, by either direct link or updating preferences.
            You need to enable Subscription Tracking for getting this type of event.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.EngagementEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.GroupUnsubscribeEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.InboundEmail">
            <summary>
            The parsed information about an email sent by SendGrid via a webhook
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Headers">
            <summary>
            Gets or sets the headers of the email.
            </summary>
            <value>
            The headers.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Dkim">
            <summary>
            Gets or sets a string containing the verification results of any DKIM and domain keys signatures in the message.
            </summary>
            <value>
            The dkim.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.To">
            <summary>
            Gets or sets the email recipient field, as taken from the message headers.
            </summary>
            <value>
            To.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Cc">
            <summary>
            Gets or sets the carbon copy recipient field, as taken from the message headers.
            </summary>
            <value>
            To.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Html">
            <summary>
            Gets or sets the HTML body of email. If not set, email did not have a HTML body.
            </summary>
            <value>
            The HTML.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Text">
            <summary>
            Gets or sets the TEXT body of email .If not set, email did not have a TEXT body.
            </summary>
            <value>
            The TEXT.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.From">
            <summary>
            Gets or sets from the email sender, as taken from the message headers
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.SenderIp">
            <summary>
            Gets or sets the sender's ip address.
            </summary>
            <value>
            The sender ip.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.SpamReport">
            <summary>
            Gets or sets the Spam Assassin's spam report.
            </summary>
            <value>
            The spam report.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Envelope">
            <summary>
            Gets or sets the SMTP envelope.
            This will have two variables:
            - to, which is a single-element array containing the address that we received the email to,
            - from, which is the return path for the message.
            </summary>
            <value>
            The envelope.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Subject">
            <summary>
            Gets or sets the email subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.SpamScore">
            <summary>
            Gets or sets the Spam Assassin’s rating for whether or not this is spam.
            </summary>
            <value>
            The spam score.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Attachments">
            <summary>
            Gets or sets the attachment.
            </summary>
            <value>
            The attachment.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Charsets">
            <summary>
            Gets or sets the character sets of the fields extracted from the message.
            </summary>
            <value>
            The charsets.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmail.Spf">
            <summary>
            Gets or sets the results of the Sender Policy Framework verification of the message sender
            and receiving IP address.
            </summary>
            <value>
            The SPF.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.InboundEmailAttachment">
            <summary>
            Strongly typed representation of the information sudmited by SendGrid in a 'inbound parse' webhook
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmailAttachment.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmailAttachment.ContentType">
            <summary>
            Gets or sets the content-type. Defaults to text/plain if unspecified.
            </summary>
            <value>
            The content-type.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmailAttachment.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmailAttachment.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmailAttachment.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmailAttachment.ContentId">
            <summary>
            Gets or sets the content identifier.
            </summary>
            <value>
            The content identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.InboundEmailEnvelope">
            <summary>
            The SMTP envelope
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmailEnvelope.To">
            <summary>
            Gets or sets to, which is a single-element array containing the address that we received the email to,
            </summary>
            <value>
            To.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.InboundEmailEnvelope.From">
            <summary>
            Gets or sets from, which is the return path for the message.
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.IpPool">
            <summary>
            The IP pool used when email was sent
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.IpPool.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.IpPool.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.Newsletter">
            <summary>
            A newsletter
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Newsletter.UserListId">
            <summary>
            Gets or sets the user list identifier.
            </summary>
            <value>
            The user list identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Newsletter.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.Newsletter.SendId">
            <summary>
            Gets or sets the send identifier.
            </summary>
            <value>
            The send identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.OpenEvent">
            <summary>
            Recipient has opened the HTML message.
            You need to enable Open Tracking for getting this type of event.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.EngagementEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.OpenEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.OpenEvent.Newsletter">
            <summary>
            Gets or sets the newsletter.
            </summary>
            <value>
            The newsletter.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.ProcessedEvent">
            <summary>
            Message has been received and is ready to be delivered.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.DeliveryEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.ProcessedEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.ProcessedEvent.Newsletter">
            <summary>
            Gets or sets the newsletter.
            </summary>
            <value>
            The newsletter.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.ProcessedEvent.ProcessedOn">
            <summary>
            Gets or sets the date the message was processed.
            </summary>
            <value>
            The date the message was processed.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.SpamReportEvent">
            <summary>
            Recipient marked message as spam.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.EngagementEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.SpamReportEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.UnsubscribeEvent">
            <summary>
            Recipient clicked on the ‘Opt Out of All Emails' link (available after clicking the message's subscription management link).
            You need to enable Subscription Tracking for getting this type of event.
            </summary>
            <seealso cref="T:StrongGrid.Model.Webhooks.EngagementEvent" />
        </member>
        <member name="P:StrongGrid.Model.Webhooks.UnsubscribeEvent.AsmGroupId">
            <summary>
            Gets or sets the asm group identifier.
            </summary>
            <value>
            The asm group identifier.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.UrlOffset">
            <summary>
            UrlOffset gives you more information about the link that was clicked.
            </summary>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.UrlOffset.Index">
            <summary>
            Gets or sets the index.
            Links are indexed beginning at 0.
            Index indicates which link was clicked based on that index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:StrongGrid.Model.Webhooks.UrlOffset.Type">
            <summary>
            Gets or sets the type.
            The type of link can be either text, HTML, or a header.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:StrongGrid.Model.Webhooks.UrlType">
            <summary>
            Enumeration to indicate the type of url
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.UrlType.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.UrlType.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:StrongGrid.Model.Webhooks.UrlType.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="T:StrongGrid.Resources.AccessManagement">
            <summary>
            Allows you to manage IP whitelisting
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/ip_access_management.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.AccessManagement.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.AccessManagement" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.AccessManagement.GetAccessHistoryAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a list of IPs that have accessed your account through the web or API.
            </summary>
            <param name="limit">Number of IP activity entries to return.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.AccessManagement.GetWhitelistedIpAddressesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the whitelisted IPs.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.WhitelistedIp" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.AccessManagement.AddIpAddressToWhitelistAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Add an IP address to the list of whitelisted ip addresses
            </summary>
            <param name="ip">The ip address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.AccessManagement.AddIpAddressesToWhitelistAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Add multiple IP addresses to the list of whitelisted ip addresses
            </summary>
            <param name="ips">The ip addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.AccessManagement.RemoveIpAddressFromWhitelistAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete an ip address from the whitelist.
            </summary>
            <param name="id">The ip address identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.AccessManagement.RemoveIpAddressesFromWhitelistAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Delete multiple ip addresses from the whitelist.
            </summary>
            <param name="ids">The ip address identifiers.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.AccessManagement.GetWhitelistedIpAddressAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Returns information about a whitelisted ip address.
            </summary>
            <param name="id">The ip address identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Alerts">
            <summary>
            Allows you to manage Alerts
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/alerts.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Alerts.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Alerts" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Alerts.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific alert.
            </summary>
            <param name="alertId">The alert identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Alerts.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all alerts.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Alerts.CreateAsync(StrongGrid.Model.AlertType,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Nullable{StrongGrid.Model.Frequency}},StrongGrid.Utilities.Parameter{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Create a new alert.
            </summary>
            <param name="type">The type.</param>
            <param name="emailTo">The email to.</param>
            <param name="frequency">The frequency.</param>
            <param name="percentage">The percentage.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Alerts.DeleteAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete an alert.
            </summary>
            <param name="alertId">The alert identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Alerts.UpdateAsync(System.Int64,StrongGrid.Utilities.Parameter{System.Nullable{StrongGrid.Model.AlertType}},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Nullable{StrongGrid.Model.Frequency}},StrongGrid.Utilities.Parameter{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Update an alert.
            </summary>
            <param name="alertId">The alert identifier.</param>
            <param name="type">The type.</param>
            <param name="emailTo">The email to.</param>
            <param name="frequency">The frequency.</param>
            <param name="percentage">The percentage.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ApiKeys">
            <summary>
            Allows you to manage API Keys.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/API_Keys/index.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ApiKeys.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.ApiKeys" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.ApiKeys.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get an existing API Key
            </summary>
            <param name="keyId">The key identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ApiKeys.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all API Keys belonging to the authenticated user
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
            <remarks>
            The response does not include the permissions associated with each api key.
            In order to get the permission for a given key, you need to <see cref="M:StrongGrid.Resources.ApiKeys.GetAsync(System.String,System.Threading.CancellationToken)">retrieve keys one at a time</see>.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ApiKeys.CreateAsync(System.String,StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Generate a new API Key
            </summary>
            <param name="name">The name.</param>
            <param name="scopes">The scopes.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ApiKeys.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Revoke an existing API Key
            </summary>
            <param name="keyId">The key identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ApiKeys.UpdateAsync(System.String,System.String,StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update an API Key
            </summary>
            <param name="keyId">The key identifier.</param>
            <param name="name">The name.</param>
            <param name="scopes">The scopes.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The <see cref="T:StrongGrid.Model.ApiKey"/>.</returns>
        </member>
        <member name="M:StrongGrid.Resources.ApiKeys.CreateWithBillingPermissionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Generate a new API Key for billing
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ApiKeys.CreateWithAllPermissionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Generate a new API Key with all permissions
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
            <remarks>
            If you specify an API Key when instanciating the <see cref="T:StrongGrid.Client" />, the new API Key will inherit the permissions of that API Key.
            If you specify a username and password when instanciating the <see cref="T:StrongGrid.Client" />, the new API Key will inherit the permissions of that user.
            </remarks>
        </member>
        <member name="T:StrongGrid.Resources.Batches">
            <summary>
            Allows you to manages batches.
            </summary>
        </member>
        <member name="M:StrongGrid.Resources.Batches.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Batches" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Batches.GenerateBatchIdAsync(System.Threading.CancellationToken)">
            <summary>
            Generate a new Batch ID to associate with scheduled sends
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The batch id.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Batches.ValidateBatchIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validate whether or not a batch id is valid
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
              <c>true</c> if the batch id is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Batches.Cancel(System.String,System.Threading.CancellationToken)">
            <summary>
            The Cancel Scheduled Sends feature allows the customer to cancel a scheduled send based on a Batch ID.
            Scheduled sends cancelled less than 10 minutes before the scheduled time are not guaranteed to be cancelled
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Batches.Pause(System.String,System.Threading.CancellationToken)">
            <summary>
            The Pause Scheduled Sends feature allows the customer to pause a scheduled send based on a Batch ID.
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Batches.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all cancel/paused scheduled send information
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.BatchInfo" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Batches.Resume(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete the cancellation/pause of a scheduled send.
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Blocks">
            <summary>
            Allows you to manage blocked email addresses.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/blocks.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Blocks.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Blocks" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Blocks.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve all blocks.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Block">Blocks</see>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Blocks.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific block.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Block" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Blocks.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all blocks.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Blocks.DeleteMultipleAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete multiple blocks.
            </summary>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Blocks.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a specific block.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Bounces">
            <summary>
            Allows you to manage email addresses that have bounced.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/bounces.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Bounces.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Bounces" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Bounces.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get all bounces
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Bounce" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Bounces.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a list of bounces for a given email address
            </summary>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Bounce" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Bounces.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all bounces
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Bounces.DeleteAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete bounces for a specified group of email addresses
            </summary>
            <param name="emails">The emails.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Bounces.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete bounces for a specified email address
            </summary>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Campaigns">
            <summary>
            Allows you to manage <see cref="T:StrongGrid.Model.Campaign">campaigns</see>.
            </summary>
            <remarks>
            See also: https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/campaigns.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Campaigns" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.CreateAsync(System.String,System.Int64,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.Int64}},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.Int64}},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},StrongGrid.Utilities.Parameter{System.Nullable{System.Int64}},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Create a campaign.
            </summary>
            <param name="title">The title.</param>
            <param name="senderId">The sender identifier.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="listIds">The list ids.</param>
            <param name="segmentIds">The segment ids.</param>
            <param name="categories">The categories.</param>
            <param name="suppressionGroupId">The suppression group identifier.</param>
            <param name="customUnsubscribeUrl">The custom unsubscribe URL.</param>
            <param name="ipPool">The ip pool.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Campaign" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.GetAllAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve all campaigns.
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Campaign" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a campaign.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Campaign" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.DeleteAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a campaign.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.UpdateAsync(System.Int64,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Nullable{System.Int64}},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.Int64}},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.Int64}},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},StrongGrid.Utilities.Parameter{System.Nullable{System.Int64}},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Update a campaign
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="title">The title.</param>
            <param name="senderId">The sender identifier.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="listIds">The list ids.</param>
            <param name="segmentIds">The segment ids.</param>
            <param name="categories">The categories.</param>
            <param name="suppressionGroupId">The suppression group identifier.</param>
            <param name="customUnsubscribeUrl">The custom unsubscribe URL.</param>
            <param name="ipPool">The ip pool.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Campaign" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.SendNowAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Send a campaign immediately.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.ScheduleAsync(System.Int64,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Schedule a campaign to be sewnt at a later time.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="sendOn">The send on.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.RescheduleAsync(System.Int64,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Change the date a campaign is scheduled to be sent
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="sendOn">The send on.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.GetScheduledDateAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve the date a campaign is scheduled to be sent
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:System.DateTime" /> the campaign is cheduled to be sent or <c>null</c> if the campaign is
            not scheduled to be sent.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.UnscheduleAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Unschedule a scheduled campaign.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Campaigns.SendTestAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Send a test campaign
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
            <exception cref="T:System.ArgumentException">You must specify at least one email address</exception>
        </member>
        <member name="T:StrongGrid.Resources.Categories">
            <summary>
            Allows you to manage categories
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Categories/categories.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Categories.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Categories" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Categories.GetAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve a list of your categories.
            </summary>
            <param name="searchPrefix">Performs a prefix search on this value.</param>
            <param name="limit">Optional field to limit the number of results returned.</param>
            <param name="offset">Optional beginning point in the list to retrieve from.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of strings representing the catgories.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Contacts">
            <summary>
            Allows you to manage contacts (which are sometimes refered to as 'recipients').
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/contactdb.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Contacts" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.CreateAsync(System.String,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{StrongGrid.Model.Field}},System.Threading.CancellationToken)">
            <summary>
            Creates a contact.
            </summary>
            <param name="email">The email.</param>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="customFields">The custom fields.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The identifier of the new contact.
            </returns>
            <exception cref="T:System.Exception">Thrown when an exception occured while creating the contact.</exception>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.UpdateAsync(System.String,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{StrongGrid.Model.Field}},System.Threading.CancellationToken)">
            <summary>
            Updates the contact.
            </summary>
            <param name="email">The email.</param>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="customFields">The custom fields.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <exception cref="T:System.Exception">Thrown when an exception occured while updating the contact.</exception>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.ImportAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.Contact},System.Threading.CancellationToken)">
            <summary>
            Import contacts.
            </summary>
            <param name="contacts">The contacts.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ImportResult">result</see> of the operation.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a contact.
            </summary>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.DeleteAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete contacts.
            </summary>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a contact.
            </summary>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.GetAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve multiple contacts.
            </summary>
            <param name="recordsPerPage">The records per page.</param>
            <param name="page">The page.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.GetBillableCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the billable count.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The number of billable contacts.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.GetTotalCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the total count.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The total number of contacts.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.SearchAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.SearchCondition},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Searches for contacts matching the specified conditions.
            </summary>
            <param name="conditions">The conditions.</param>
            <param name="listId">The list identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Contacts.GetListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve the lists that a recipient is on.
            </summary>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.List" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.CustomFields">
            <summary>
            Allows you to manage custom fields.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/contactdb.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.CustomFields.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.CustomFields" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.CustomFields.CreateAsync(System.String,StrongGrid.Model.FieldType,System.Threading.CancellationToken)">
            <summary>
            Create a custom field.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:StrongGrid.Model.CustomFieldMetadata">metadata</see> about the new field.</returns>
        </member>
        <member name="M:StrongGrid.Resources.CustomFields.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all custom fields.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.CustomFieldMetadata">metadata</see> about the fields.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.CustomFields.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve a custom field.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.CustomFieldMetadata">metadata</see> about the field.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.CustomFields.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a custom field.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.CustomFields.GetReservedFieldsAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the reserved fields.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Field" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.GlobalSuppressions">
            <summary>
            Allows you to manage email addresses that will not receive any emails.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/global_suppressions.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.GlobalSuppressions.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.GlobalSuppressions" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.GlobalSuppressions.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all globally unsubscribed email addresses.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.GlobalSuppression"/>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.GlobalSuppressions.IsUnsubscribedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a recipient address is in the global suppressions group.
            </summary>
            <param name="email">email address to check</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the email address is in the global suppression group; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.GlobalSuppressions.AddAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Add recipient addresses to the global suppression group.
            </summary>
            <param name="emails">Array of email addresses to add to the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.GlobalSuppressions.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a recipient email from the global suppressions group.
            </summary>
            <param name="email">email address to be removed from the global suppressions group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IAccessManagement">
            <summary>
            Allows you to manage IP whitelisting
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/ip_access_management.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IAccessManagement.GetAccessHistoryAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a list of IPs that have accessed your account through the web or API.
            </summary>
            <param name="limit">Number of IP activity entries to return.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAccessManagement.GetWhitelistedIpAddressesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the whitelisted IPs.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.WhitelistedIp" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAccessManagement.AddIpAddressToWhitelistAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Add an IP address to the list of whitelisted ip addresses
            </summary>
            <param name="ip">The ip address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAccessManagement.AddIpAddressesToWhitelistAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Add multiple IP addresses to the list of whitelisted ip addresses
            </summary>
            <param name="ips">The ip addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAccessManagement.RemoveIpAddressFromWhitelistAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete an ip address from the whitelist.
            </summary>
            <param name="id">The ip address identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAccessManagement.RemoveIpAddressesFromWhitelistAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Delete multiple ip addresses from the whitelist.
            </summary>
            <param name="ids">The ip address identifiers.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAccessManagement.GetWhitelistedIpAddressAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Returns information about a whitelisted ip address.
            </summary>
            <param name="id">The ip address identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IAlerts">
            <summary>
            Allows you to manage Alerts
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/alerts.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IAlerts.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific alert.
            </summary>
            <param name="alertId">The alert identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAlerts.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all alerts.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAlerts.CreateAsync(StrongGrid.Model.AlertType,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Nullable{StrongGrid.Model.Frequency}},StrongGrid.Utilities.Parameter{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Create a new alert.
            </summary>
            <param name="type">The type.</param>
            <param name="emailTo">The email to.</param>
            <param name="frequency">The frequency.</param>
            <param name="percentage">The percentage.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAlerts.DeleteAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete an alert.
            </summary>
            <param name="alertId">The alert identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IAlerts.UpdateAsync(System.Int64,StrongGrid.Utilities.Parameter{System.Nullable{StrongGrid.Model.AlertType}},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Nullable{StrongGrid.Model.Frequency}},StrongGrid.Utilities.Parameter{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Update an alert.
            </summary>
            <param name="alertId">The alert identifier.</param>
            <param name="type">The type.</param>
            <param name="emailTo">The email to.</param>
            <param name="frequency">The frequency.</param>
            <param name="percentage">The percentage.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Alert" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IApiKeys">
            <summary>
            Allows you to manage API Keys.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/API_Keys/index.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IApiKeys.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get an existing API Key
            </summary>
            <param name="keyId">The key identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IApiKeys.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all API Keys belonging to the authenticated user
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
            <remarks>
            The response does not include the permissions associated with each api key.
            In order to get the permission for a given key, you need to <see cref="M:StrongGrid.Resources.IApiKeys.GetAsync(System.String,System.Threading.CancellationToken)">retrieve keys one at a time</see>.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IApiKeys.CreateAsync(System.String,StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Generate a new API Key
            </summary>
            <param name="name">The name.</param>
            <param name="scopes">The scopes.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IApiKeys.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Revoke an existing API Key
            </summary>
            <param name="keyId">The key identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IApiKeys.UpdateAsync(System.String,System.String,StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update an API Key
            </summary>
            <param name="keyId">The key identifier.</param>
            <param name="name">The name.</param>
            <param name="scopes">The scopes.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The <see cref="T:StrongGrid.Model.ApiKey"/>.</returns>
        </member>
        <member name="M:StrongGrid.Resources.IApiKeys.CreateWithBillingPermissionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Generate a new API Key for billing
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IApiKeys.CreateWithAllPermissionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Generate a new API Key with all permissions
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ApiKey" />.
            </returns>
            <remarks>
            If you specify an API Key when instanciating the <see cref="T:StrongGrid.Client" />, the new API Key will inherit the permissions of that API Key.
            If you specify a username and password when instanciating the <see cref="T:StrongGrid.Client" />, the new API Key will inherit the permissions of that user.
            </remarks>
        </member>
        <member name="T:StrongGrid.Resources.IBatches">
            <summary>
            Allows you to manages batches.
            </summary>
        </member>
        <member name="M:StrongGrid.Resources.IBatches.GenerateBatchIdAsync(System.Threading.CancellationToken)">
            <summary>
            Generate a new Batch ID to associate with scheduled sends
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The batch id.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBatches.ValidateBatchIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validate whether or not a batch id is valid
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
              <c>true</c> if the batch id is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBatches.Cancel(System.String,System.Threading.CancellationToken)">
            <summary>
            The Cancel Scheduled Sends feature allows the customer to cancel a scheduled send based on a Batch ID.
            Scheduled sends cancelled less than 10 minutes before the scheduled time are not guaranteed to be cancelled
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBatches.Pause(System.String,System.Threading.CancellationToken)">
            <summary>
            The Pause Scheduled Sends feature allows the customer to pause a scheduled send based on a Batch ID.
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBatches.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all cancel/paused scheduled send information
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.BatchInfo" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBatches.Resume(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete the cancellation/pause of a scheduled send.
            </summary>
            <param name="batchId">The batch identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IBlocks">
            <summary>
            Allows you to manage blocked email addresses.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/blocks.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IBlocks.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve all blocks.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Block">Blocks</see>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBlocks.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific block.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Block" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBlocks.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all blocks.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBlocks.DeleteMultipleAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete multiple blocks.
            </summary>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBlocks.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a specific block.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IBounces">
            <summary>
            Allows you to manage email addresses that have bounced.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/bounces.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IBounces.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get all bounces
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Bounce" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBounces.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a list of bounces for a given email address
            </summary>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Bounce" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBounces.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all bounces
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBounces.DeleteAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete bounces for a specified group of email addresses
            </summary>
            <param name="emails">The emails.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IBounces.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete bounces for a specified email address
            </summary>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ICampaigns">
            <summary>
            Allows you to manage <see cref="T:StrongGrid.Model.Campaign">campaigns</see>.
            </summary>
            <remarks>
            See also: https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/campaigns.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.CreateAsync(System.String,System.Int64,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.Int64}},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.Int64}},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},StrongGrid.Utilities.Parameter{System.Nullable{System.Int64}},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Create a campaign.
            </summary>
            <param name="title">The title.</param>
            <param name="senderId">The sender identifier.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="listIds">The list ids.</param>
            <param name="segmentIds">The segment ids.</param>
            <param name="categories">The categories.</param>
            <param name="suppressionGroupId">The suppression group identifier.</param>
            <param name="customUnsubscribeUrl">The custom unsubscribe URL.</param>
            <param name="ipPool">The ip pool.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Campaign" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.GetAllAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve all campaigns.
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Campaign" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a campaign.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Campaign" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.DeleteAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a campaign.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.UpdateAsync(System.Int64,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Nullable{System.Int64}},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.Int64}},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.Int64}},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},StrongGrid.Utilities.Parameter{System.Nullable{System.Int64}},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Update a campaign
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="title">The title.</param>
            <param name="senderId">The sender identifier.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="listIds">The list ids.</param>
            <param name="segmentIds">The segment ids.</param>
            <param name="categories">The categories.</param>
            <param name="suppressionGroupId">The suppression group identifier.</param>
            <param name="customUnsubscribeUrl">The custom unsubscribe URL.</param>
            <param name="ipPool">The ip pool.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Campaign" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.SendNowAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Send a campaign immediately.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.ScheduleAsync(System.Int64,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Schedule a campaign to be sewnt at a later time.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="sendOn">The send on.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.RescheduleAsync(System.Int64,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Change the date a campaign is scheduled to be sent
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="sendOn">The send on.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.GetScheduledDateAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve the date a campaign is scheduled to be sent
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:System.DateTime" /> the campaign is cheduled to be sent or <c>null</c> if the campaign is
            not scheduled to be sent.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.UnscheduleAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Unschedule a scheduled campaign.
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICampaigns.SendTestAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Send a test campaign
            </summary>
            <param name="campaignId">The id of the campaign</param>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
            <exception cref="T:System.ArgumentException">You must specify at least one email address</exception>
        </member>
        <member name="T:StrongGrid.Resources.ICategories">
            <summary>
            Allows you to manage categories
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Categories/categories.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ICategories.GetAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve a list of your categories.
            </summary>
            <param name="searchPrefix">Performs a prefix search on this value.</param>
            <param name="limit">Optional field to limit the number of results returned.</param>
            <param name="offset">Optional beginning point in the list to retrieve from.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of strings representing the catgories.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IContacts">
            <summary>
            Allows you to manage contacts (which are sometimes refered to as 'recipients').
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/contactdb.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.CreateAsync(System.String,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{StrongGrid.Model.Field}},System.Threading.CancellationToken)">
            <summary>
            Creates a contact.
            </summary>
            <param name="email">The email.</param>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="customFields">The custom fields.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The identifier of the new contact.
            </returns>
            <exception cref="T:System.Exception">Thrown when an exception occured while creating the contact.</exception>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.UpdateAsync(System.String,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{StrongGrid.Model.Field}},System.Threading.CancellationToken)">
            <summary>
            Updates the contact.
            </summary>
            <param name="email">The email.</param>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="customFields">The custom fields.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task.
            </returns>
            <exception cref="T:System.Exception">Thrown when an exception occured while updating the contact.</exception>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.ImportAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.Contact},System.Threading.CancellationToken)">
            <summary>
            Import contacts.
            </summary>
            <param name="contacts">The contacts.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.ImportResult">result</see> of the operation.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a contact.
            </summary>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.DeleteAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete contacts.
            </summary>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a contact.
            </summary>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.GetAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve multiple contacts.
            </summary>
            <param name="recordsPerPage">The records per page.</param>
            <param name="page">The page.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.GetBillableCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the billable count.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The number of billable contacts.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.GetTotalCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the total count.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The total number of contacts.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.SearchAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.SearchCondition},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Searches for contacts matching the specified conditions.
            </summary>
            <param name="conditions">The conditions.</param>
            <param name="listId">The list identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IContacts.GetListsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve the lists that a recipient is on.
            </summary>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.List" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ICustomFields">
            <summary>
            Allows you to manage custom fields.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/contactdb.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ICustomFields.CreateAsync(System.String,StrongGrid.Model.FieldType,System.Threading.CancellationToken)">
            <summary>
            Create a custom field.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:StrongGrid.Model.CustomFieldMetadata">metadata</see> about the new field.</returns>
        </member>
        <member name="M:StrongGrid.Resources.ICustomFields.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all custom fields.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.CustomFieldMetadata">metadata</see> about the fields.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICustomFields.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve a custom field.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.CustomFieldMetadata">metadata</see> about the field.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICustomFields.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a custom field.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ICustomFields.GetReservedFieldsAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the reserved fields.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Field" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IGlobalSuppressions">
            <summary>
            Allows you to manage email addresses that will not receive any emails.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/global_suppressions.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IGlobalSuppressions.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all globally unsubscribed email addresses.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.GlobalSuppression"/>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IGlobalSuppressions.IsUnsubscribedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a recipient address is in the global suppressions group.
            </summary>
            <param name="email">email address to check</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the email address is in the global suppression group; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IGlobalSuppressions.AddAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Add recipient addresses to the global suppression group.
            </summary>
            <param name="emails">Array of email addresses to add to the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IGlobalSuppressions.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a recipient email from the global suppressions group.
            </summary>
            <param name="email">email address to be removed from the global suppressions group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IInvalidEmails">
            <summary>
            Allows you to manage email addresses that have been declared invalid.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/invalid_emails.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IInvalidEmails.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve all invalid emails.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.InvalidEmail" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IInvalidEmails.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve invalid emails for a given email address.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.InvalidEmail" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IInvalidEmails.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all invalid emails.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IInvalidEmails.DeleteMultipleAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete multiple invalid emails.
            </summary>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IInvalidEmails.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a specific invalid emails.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ILists">
            <summary>
            Allows you to create an manage lists.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/contactdb.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ILists.CreateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a list.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.List" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all lists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.List" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.DeleteAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.DeleteAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Delete multiple lists.
            </summary>
            <param name="listIds">The list ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.List" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.UpdateAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.GetRecipientsAsync(System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve the recipients on a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="recordsPerPage">The records per page.</param>
            <param name="page">The page.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.AddRecipientAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a recipient to a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.RemoveRecipientAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove a recipient from a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ILists.AddRecipientsAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Add multiple recipients to a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="contactIds">The contact ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IMail">
            <summary>
            Allows you to send email over SendGrid’s Web API.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/index.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IMail.SendToSingleRecipientAsync(StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.String,System.String,System.String,System.Boolean,System.Boolean,StrongGrid.Model.SubscriptionTrackingSettings,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,System.Threading.CancellationToken)">
            <summary>
            Send an email to a single recipient
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="trackOpens">if set to <c>true</c> [track opens].</param>
            <param name="trackClicks">if set to <c>true</c> [track clicks].</param>
            <param name="subscriptionTracking">The subscription tracking.</param>
            <param name="replyTo">The reply to.</param>
            <param name="attachments">The attachments.</param>
            <param name="templateId">The template identifier.</param>
            <param name="sections">The sections.</param>
            <param name="headers">The headers.</param>
            <param name="categories">The categories.</param>
            <param name="customArgs">The custom arguments.</param>
            <param name="sendAt">The send at.</param>
            <param name="batchId">The batch identifier.</param>
            <param name="unsubscribeOptions">The unsubscribe options.</param>
            <param name="ipPoolName">Name of the ip pool.</param>
            <param name="mailSettings">The mail settings.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The message id.
            </returns>
            <remarks>
            This is a convenience method with simplified parameters.
            If you need more options, use the <see cref="M:StrongGrid.Resources.IMail.SendAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.MailPersonalization},System.String,System.Collections.Generic.IEnumerable{StrongGrid.Model.MailContent},StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,StrongGrid.Model.TrackingSettings,System.Threading.CancellationToken)" /> method.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IMail.SendToMultipleRecipientsAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.MailAddress},StrongGrid.Model.MailAddress,System.String,System.String,System.String,System.Boolean,System.Boolean,StrongGrid.Model.SubscriptionTrackingSettings,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,System.Threading.CancellationToken)">
            <summary>
            Send the same email to multiple recipients
            </summary>
            <param name="recipients">The recipients.</param>
            <param name="from">From.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="trackOpens">if set to <c>true</c> [track opens].</param>
            <param name="trackClicks">if set to <c>true</c> [track clicks].</param>
            <param name="subscriptionTracking">The subscription tracking.</param>
            <param name="replyTo">The reply to.</param>
            <param name="attachments">The attachments.</param>
            <param name="templateId">The template identifier.</param>
            <param name="sections">The sections.</param>
            <param name="headers">The headers.</param>
            <param name="categories">The categories.</param>
            <param name="customArgs">The custom arguments.</param>
            <param name="sendAt">The send at.</param>
            <param name="batchId">The batch identifier.</param>
            <param name="unsubscribeOptions">The unsubscribe options.</param>
            <param name="ipPoolName">Name of the ip pool.</param>
            <param name="mailSettings">The mail settings.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The message id.
            </returns>
            <remarks>
            This is a convenience method with simplified parameters.
            If you need more options, use the <see cref="M:StrongGrid.Resources.IMail.SendAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.MailPersonalization},System.String,System.Collections.Generic.IEnumerable{StrongGrid.Model.MailContent},StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,StrongGrid.Model.TrackingSettings,System.Threading.CancellationToken)" /> method.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IMail.SendAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.MailPersonalization},System.String,System.Collections.Generic.IEnumerable{StrongGrid.Model.MailContent},StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,StrongGrid.Model.TrackingSettings,System.Threading.CancellationToken)">
            <summary>
            Send email(s) over SendGrid’s v3 Web API
            </summary>
            <param name="personalizations">The personalizations.</param>
            <param name="subject">The subject.</param>
            <param name="contents">The contents.</param>
            <param name="from">From.</param>
            <param name="replyTo">The reply to.</param>
            <param name="attachments">The attachments.</param>
            <param name="templateId">The template identifier.</param>
            <param name="sections">The sections.</param>
            <param name="headers">The headers.</param>
            <param name="categories">The categories.</param>
            <param name="customArgs">The custom arguments.</param>
            <param name="sendAt">The send at.</param>
            <param name="batchId">The batch identifier.</param>
            <param name="unsubscribeOptions">The unsubscribe options.</param>
            <param name="ipPoolName">Name of the ip pool.</param>
            <param name="mailSettings">The mail settings.</param>
            <param name="trackingSettings">The tracking settings.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The message id.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.InvalidEmails">
            <summary>
            Allows you to manage email addresses that have been declared invalid.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/invalid_emails.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.InvalidEmails.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.InvalidEmails" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.InvalidEmails.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve all invalid emails.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.InvalidEmail" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.InvalidEmails.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve invalid emails for a given email address.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.InvalidEmail" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.InvalidEmails.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all invalid emails.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.InvalidEmails.DeleteMultipleAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete multiple invalid emails.
            </summary>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.InvalidEmails.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a specific invalid emails.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ISegments">
            <summary>
            Allows you to create and manage segments.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/campaigns.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ISegments.CreateAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{StrongGrid.Model.SearchCondition},System.Threading.CancellationToken)">
            <summary>
            Create a segment.
            </summary>
            <param name="name">The name.</param>
            <param name="listId">The list identifier.</param>
            <param name="conditions">The conditions.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Segment" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISegments.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all segments.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Segment" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISegments.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a segment.
            </summary>
            <param name="segmentId">The segment identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Segment" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISegments.UpdateAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{StrongGrid.Model.SearchCondition},System.Threading.CancellationToken)">
            <summary>
            Update a segment.
            </summary>
            <param name="segmentId">The segment identifier.</param>
            <param name="name">The name.</param>
            <param name="listId">The list identifier.</param>
            <param name="conditions">The conditions.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Segment" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISegments.DeleteAsync(System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Delete a segment.
            </summary>
            <param name="segmentId">The segment identifier.</param>
            <param name="deleteMatchingContacts">if set to <c>true</c> [delete matching contacts].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISegments.GetRecipientsAsync(System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve the recipients on a segment.
            </summary>
            <param name="segmentId">The segment identifier.</param>
            <param name="recordsPerPage">The records per page.</param>
            <param name="page">The page.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ISenderIdentities">
            <summary>
            Allows you to create and manage sender identities for Marketing Campaigns.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/sender_identities.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ISenderIdentities.CreateAsync(System.String,StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create a sender identity.
            </summary>
            <param name="nickname">The nickname.</param>
            <param name="from">From.</param>
            <param name="replyTo">The reply to.</param>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="zip">The zip.</param>
            <param name="country">The country.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SenderIdentity" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISenderIdentities.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all sender identities.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SenderIdentity" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISenderIdentities.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a sender identity.
            </summary>
            <param name="senderId">The sender identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SenderIdentity" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISenderIdentities.UpdateAsync(System.Int64,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{StrongGrid.Model.MailAddress},StrongGrid.Utilities.Parameter{StrongGrid.Model.MailAddress},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Update a sender identity.
            </summary>
            <param name="senderId">The sender identifier.</param>
            <param name="nickname">The nickname.</param>
            <param name="from">From.</param>
            <param name="replyTo">The reply to.</param>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="zip">The zip.</param>
            <param name="country">The country.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SenderIdentity" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISenderIdentities.DeleteAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a sender identity.
            </summary>
            <param name="senderId">The sender identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISenderIdentities.ResendVerification(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Resend the verification to a sender.
            </summary>
            <param name="senderId">The sender identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ISettings">
            <summary>
            Allows you to set and check the status of user settings.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Settings/index.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetEnforcedTlsSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get the current Enforced TLS settings.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EnforcedTlsSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateEnforcedTlsSettingsAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the Enforced TLS settings
            </summary>
            <param name="requireTls">if set to <c>true</c> [require TLS].</param>
            <param name="requireValidCert">if set to <c>true</c> [require valid cert].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EnforcedTlsSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetAllPartnerSettingsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Partner Settings
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.GlobalSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetNewRelicSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get New Relic Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.NewRelicSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateNewRelicSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the New Relic settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="licenseKey">The license key.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.NewRelicSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetAllTrackingSettingsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Tracking Settings
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.GlobalSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetClickTrackingSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Click Tracking Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateClickTrackingSettingsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the click tracking settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetGoogleAnalyticsGlobalSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Google Analytics Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.GoogleAnalyticsGlobalSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateGoogleAnalyticsGlobalSettingsAsync(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the New Relic settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="utmSource">The utm source.</param>
            <param name="utmMedium">The utm medium.</param>
            <param name="utmTerm">The utm term.</param>
            <param name="utmContent">Content of the utm.</param>
            <param name="utmCampaign">The utm campaign.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.GoogleAnalyticsGlobalSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetOpenTrackingSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Open Tracking Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateOpenTrackingSettingsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the open tracking settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetSubscriptionTrackingSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Subscription Tracking Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SubscriptionSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateSubscriptionTrackingSettingsAsync(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Subscription Tracking settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="landingPageHtml">The landing page HTML.</param>
            <param name="url">The URL.</param>
            <param name="replacementTag">The replacement tag.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SubscriptionSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetAllMailSettingsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Mail Settings
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An aray of <see cref="T:StrongGrid.Model.GlobalSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetBccMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get BCC Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateBccMailSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the BCC settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetAddressWhitelistMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Address Whitelist Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.AddressWhitelistSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateAddressWhitelistMailSettingsAsync(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Change the Address Whitelist settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.AddressWhitelistSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetFooterMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Footer Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.FooterGlobalSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateFooterMailSettingsAsync(System.Boolean,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Footer settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.FooterGlobalSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetForwardSpamMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Forward Spam Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateForwardSpamMailSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Forward Spam settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetPlainContentMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Plain Content Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdatePlainContentMailSettingsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the Plain Content settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetSpamCheckMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Spam Check Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SpamCheckingSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateSpamCheckMailSettingsAsync(System.Boolean,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Change the Spam Check settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="postToUrl">The post to URL.</param>
            <param name="threshold">The threshold.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SpamCheckingSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetTemplateMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Template Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateTemplateMailSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Template settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetBouncePurgeMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Bounce Purge Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.BouncePurgeSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdatBouncePurgeMailSettingsAsync(System.Boolean,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Change the Bounce Purge settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="hardBounces">The hard bounces.</param>
            <param name="softBounces">The soft bounces.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.BouncePurgeSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.GetForwardBounceMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Forward Bounce Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISettings.UpdateForwardBounceMailSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Forward Spam settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ISpamReports">
            <summary>
            Gives you access to spam reports.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/spam_reports.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ISpamReports.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific spam report.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SpamReport" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISpamReports.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            List all spam reports.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SpamReport" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISpamReports.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all spam reports.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISpamReports.DeleteMultipleAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete multiple spam reports.
            </summary>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISpamReports.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a specific spam report.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IStatistics">
            <summary>
            The stats APIs provide a read-only access to your SendGrid email statistics.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/index.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IStatistics.GetGlobalStatisticsAsync(System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get all global email statistics for a given date range.
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/global.html
            </summary>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IStatistics.GetCategoriesStatisticsAsync(System.Collections.Generic.IEnumerable{System.String},System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get email statistics for the given categories. If you don’t pass any parameters, the endpoint will return a sum for each category 10 at a time.
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/categories.html
            </summary>
            <param name="categories">The categories to get statistics for, up to 10</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IStatistics.GetSubusersStatisticsAsync(System.Collections.Generic.IEnumerable{System.String},System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get email statistics for the given subusers. You can add up to 10 subusers parameters, one for each subuser you want stats for.
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/subusers.html
            </summary>
            <param name="subusers">The subusers to get statistics for, up to 10</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IStatistics.GetCountryStatisticsAsync(System.String,System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Gets email statistics by country and state/province. Only supported for US and CA.
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="country">US|CA</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IStatistics.GetDeviceTypesStatisticsAsync(System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Gets email statistics by device type
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IStatistics.GetClientTypesStatisticsAsync(System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get email statistics by client type
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IStatistics.GetInboxProvidersStatisticsAsync(System.Collections.Generic.IEnumerable{System.String},System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Gets email statistics by mailbox provider
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="providers">The mailbox providers to get statistics for, up to 10</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IStatistics.GetBrowsersStatisticsAsync(System.Collections.Generic.IEnumerable{System.String},System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Gets email statistics by browser
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="browsers">The browsers to get statistics for, up to 10</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ISubusers">
            <summary>
            Allows you to manage Subusers.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/subusers.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get an existing Subuser
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Subuser" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.GetAllAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            List all Subusers for a parent
            </summary>
            <param name="username">The username.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Subuser" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.CreateAsync(System.String,System.String,System.String,StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Create a new Subuser
            </summary>
            <param name="username">The username.</param>
            <param name="email">The email address.</param>
            <param name="password">The password.</param>
            <param name="ips">The ip addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Subuser" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an existing Subuser
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.UpdateAsync(System.String,StrongGrid.Utilities.Parameter{System.Boolean},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update a Subuser.
            </summary>
            <param name="username">The template identifier.</param>
            <param name="disabled">The name.</param>
            <param name="ips">The ips.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.GetMonitorSettingsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the monitor settings
            </summary>
            <param name="username">The sub user.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.MonitorSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.CreateMonitorSettingsAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create monitor settings
            </summary>
            <param name="username">The sub user.</param>
            <param name="email">The email address to receive the monitor emails.</param>
            <param name="frequency">The frequency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.MonitorSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.UpdateMonitorSettingsAsync(System.String,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Update monitor settings
            </summary>
            <param name="username">The sub user.</param>
            <param name="email">The email address to receive the monitor emails.</param>
            <param name="frequency">The frequency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.MonitorSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISubusers.DeleteMonitorSettingsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete monitor settings
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ISuppressions">
            <summary>
            Suppressions are email addresses that can be added to groups to prevent certain types of emails
            from being delivered to those addresses.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/suppressions.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ISuppressions.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all suppressions.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Suppression"/>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISuppressions.GetUnsubscribedGroupsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all unsubscribe groups that the given email address has been added to.
            </summary>
            <param name="email">Email address to search for across all groups</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Suppression"/>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISuppressions.GetUnsubscribedAddressesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get suppressed addresses for a given group.
            </summary>
            <param name="groupId">ID of the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of string representing the email addresses
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISuppressions.AddAddressToUnsubscribeGroupAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Add recipient address to the suppressions list for a given group.
            If the group has been deleted, this request will add the address to the global suppression.
            </summary>
            <param name="groupId">ID of the suppression group</param>
            <param name="email">Email address to add to the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISuppressions.AddAddressToUnsubscribeGroupAsync(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Add recipient addresses to the suppressions list for a given group.
            If the group has been deleted, this request will add the address to the global suppression.
            </summary>
            <param name="groupId">ID of the suppression group</param>
            <param name="emails">Email addresses to add to the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISuppressions.RemoveAddressFromSuppressionGroupAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a recipient email from the suppressions list for a group.
            </summary>
            <param name="groupId">ID of the suppression group to delete</param>
            <param name="email">Email address to remove from the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ISuppressions.IsSuppressedAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a recipient address is in the given suppression group.
            </summary>
            <param name="groupId">ID of the suppression group</param>
            <param name="email">email address to check</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the email address is in the global suppression group; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ITeammates">
            <summary>
            You can invite teammates or they can request access to certain scopes and you can accept
            or deny these requests
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/teammates.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.GetAccessRequestsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve a list of all recent access requests.
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of access requests
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.DenyAccessRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deny an attempt to access your account.
            </summary>
            <param name="requestId">The ID of the request that you want to deny.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.ApproveAccessRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Approve an attempt to access your account.
            </summary>
            <param name="requestId">The ID of the request that you want to approve.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.ResendInvitationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resend a teammate invite
            </summary>
            <param name="token">The token for the invite that you want to resend.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <remarks>
            Teammate invitations will expire after 7 days.
            Resending an invite will reset the expiration date.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.GetAllPendingInvitationsAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve a list of all pending teammate invitations
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An array of <see cref="T:StrongGrid.Model.TeammateInvitation" />.</returns>
            <remarks>
            Each teammate invitation is valid for 7 days.
            Users may resend the invite to refresh the expiration date.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.DeleteInvitationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a pending teammate invite
            </summary>
            <param name="token">The token for the invite that you want to delete.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <remarks>
            Each teammate invitation is valid for 7 days.
            Users may resend the invite to refresh the expiration date.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.InviteTeammateAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Send a teammate invitation via email with a predefined set of scopes, or permissions.
            A teammate invite will expire after 7 days, but you may resend the invite at any time
            to reset the expiration date.
            </summary>
            <param name="email">The email address of the teammate</param>
            <param name="scopes">The scopes, or permissions, the teammate will be granted</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <remarks>
            Essentials, Legacy Lite, and Free Trial users may create up to one teammate per account.
            There is not a teammate limit for Pro and higher plans.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.InviteTeammateAsAdminAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send a teammate invitation via email with admin permissions.
            A teammate invite will expire after 7 days, but you may resend the invite at any time
            to reset the expiration date.
            </summary>
            <param name="email">The email address of the teammate</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <remarks>
            Essentials, Legacy Lite, and Free Trial users may create up to one teammate per account.
            There is not a teammate limit for Pro and higher plans.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.GetAllTeammatesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve a list of all current teammates
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An array of <see cref="T:StrongGrid.Model.Teammate" />.</returns>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.GetTeammateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific teammate by username
            </summary>
            <param name="username">The teammate username</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:StrongGrid.Model.Teammate" />.</returns>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.UpdateTeammatePermissionsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific teammate by username
            </summary>
            <param name="username">The teammate username</param>
            <param name="scopes">The permissions to asign to the teammate</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:StrongGrid.Model.Teammate" />.</returns>
        </member>
        <member name="M:StrongGrid.Resources.ITeammates.DeleteTeammateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a teammate
            </summary>
            <param name="username">The teammate username</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.ITemplates">
            <summary>
            Allows you to manage templates.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Transactional_Templates/templates.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.CreateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a template.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Template" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all templates.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Template" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a template.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Template" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.UpdateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a template.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Template" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a template.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.CreateVersionAsync(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a template version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="name">The name.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="isActive">if set to <c>true</c> [is active].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateVersion" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.ActivateVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Activate a version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="versionId">The version identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateVersion" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.GetVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a template version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="versionId">The version identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateVersion" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.UpdateVersionAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Update a template version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="versionId">The version identifier.</param>
            <param name="name">The name.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="isActive">The is active.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateVersion" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.ITemplates.DeleteVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a template version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="versionId">The version identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IUnsubscribeGroups">
            <summary>
            Allows you to manage suppression groups.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/groups.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IUnsubscribeGroups.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all suppression groups associated with the user.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUnsubscribeGroups.GetMultipleAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieve the suppression groups that match the specified ids.
            </summary>
            <param name="groupIds">The Ids of the desired groups.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUnsubscribeGroups.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get information on a single suppression group.
            </summary>
            <param name="groupId">ID of the suppression group to delete</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUnsubscribeGroups.CreateAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a new suppression group.
            </summary>
            <param name="name">The name of the new suppression group</param>
            <param name="description">A description of the suppression group</param>
            <param name="isDefault">Default value is false</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUnsubscribeGroups.UpdateAsync(System.Int32,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Update an existing suppression group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="name">The name of the new suppression group</param>
            <param name="description">A description of the suppression group</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUnsubscribeGroups.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a suppression group.
            </summary>
            <param name="groupId">ID of the suppression group to delete</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IUser">
            <summary>
            Allows access to information about the current user.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/user.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IUser.GetProfileAsync(System.Threading.CancellationToken)">
            <summary>
            Get your user profile
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.UserProfile" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.UpdateProfileAsync(StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Update your user profile
            </summary>
            <param name="address">The address.</param>
            <param name="city">The city.</param>
            <param name="company">The company.</param>
            <param name="country">The country.</param>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="phone">The phone.</param>
            <param name="state">The state.</param>
            <param name="website">The website.</param>
            <param name="zip">The zip.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.UserProfile" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.GetAccountAsync(System.Threading.CancellationToken)">
            <summary>
            Get your user account
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Account" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.GetEmailAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the email address on file for your account
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The email address from your user profile.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.UpdateEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Update the email address on file for your account
            </summary>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The email address from your user profile.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.GetUsernameAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve your account username
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The username from your user profile.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.UpdateUsernameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Update your account username
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The username from your user profile.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.GetCreditsAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the current credit balance for your account
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.UserCredits"/>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.UpdatePasswordAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update the password for your account
            </summary>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IUser.GetPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            List all available scopes for a user
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of string representing the permissions (aka scopes).
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IWebhookSettings">
            <summary>
            Allows you to set and check webhook settings.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Webhooks/event.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IWebhookSettings.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Get the current Event Webhook settings.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EventWebhookSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWebhookSettings.UpdateAsync(System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the Event Webhook settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="url">the webhook endpoint url</param>
            <param name="bounce">if set to <c>true</c> [bounce].</param>
            <param name="click">if set to <c>true</c> [click].</param>
            <param name="deferred">if set to <c>true</c> [deferred].</param>
            <param name="delivered">if set to <c>true</c> [delivered].</param>
            <param name="dropped">if set to <c>true</c> [dropped].</param>
            <param name="groupResubscribe">if set to <c>true</c> [groupResubscribe].</param>
            <param name="groupUnsubscribe">if set to <c>true</c> [groupUnsubscribe].</param>
            <param name="open">if set to <c>true</c> [open].</param>
            <param name="processed">if set to <c>true</c> [processed].</param>
            <param name="spamReport">if set to <c>true</c> [spamReport].</param>
            <param name="unsubscribe">if set to <c>true</c> [unsubscribe].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EventWebhookSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWebhookSettings.SendTestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a fake event notification post to the provided URL.
            </summary>
            <param name="url">the event notification endpoint url</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IWebhookStats">
            <summary>
            Provides statistics on your Webhook usage.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/parse.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IWebhookStats.GetInboundParseUsageAsync(System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get statistics for Inbound Parse Webhook usage.
            </summary>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.IWhitelabel">
            <summary>
            Allows you to manage whitelabeling settings
            </summary>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetAllDomainsAsync(System.Int32,System.Int32,System.Boolean,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get all domain whitelabels
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="excludeSubusers">if set to <c>true</c> [exclude subusers].</param>
            <param name="username">The username.</param>
            <param name="domain">The domain.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
            <remarks>
            A domain whitelabel consists of a subdomain and domain that will be used to set the
            appropriate DKIM, SPF, and Return-Path. There is an option to allow SendGrid to manage
            security or the customers may manage their own DNS records. For customers using the
            manual security option, they will need to create the appropriate MX, DKIM, and SPF records
            with their hosting provider. With automatic security, the customer will just need to create a
            few CNAMEs to SendGrid, and SendGrid will manage the MX, DKIM and SPF records.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetDomainAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get a specific domain whitelabel
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.CreateDomainAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a new domain whitelabel
            </summary>
            <param name="domain">The domain.</param>
            <param name="subdomain">The subdomain.</param>
            <param name="automaticSecurity">if set to <c>true</c> [automatic security].</param>
            <param name="customSpf">if set to <c>true</c> [custom SPF].</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.UpdateDomainAsync(System.Int64,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update a whitelabel domain.
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="customSpf">if set to <c>true</c> [custom SPF].</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.DeleteDomainAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a whitelabel domain.
            </summary>
            <param name="domainId">The identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.AddIpAddressToDomainAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Add an IP to a Domain
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="ipAddress">The ip address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.DeleteIpAddressFromDomainAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove an IP from a Domain
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="ipAddress">The ip address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.ValidateDomainAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Validate a Domain
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.DomainValidation" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetAssociatedDomainAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Associated Domain
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
            <remarks>
            Domain Whitelabels can be associated with subusers via parent accounts. This functionality
            allows subusers to send mail off their parent's Whitelabels. To associate a Whitelabel, the
            parent account must first create a Whitelabel and validate it. Then the parent may associate
            the Whitelabel in subuser management.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.DisassociateDomainAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Disassociate Domain
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.AssociateDomainAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Associate Domain
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetAllIpsAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all IP whitelabels
            </summary>
            <param name="segmentPrefix">The segment prefix.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.WhitelabelIp" />.
            </returns>
            <remarks>
            A IP whitelabel consists of a subdomain and domain that will be used to generate a reverse
            DNS record for a given IP. Once SendGrid has verified that the customer has created the
            appropriate A record for their IP, SendGrid will create the appropriate reverse DNS record for
            the IP.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetIpAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get a specific IP whitelabel
            </summary>
            <param name="ipId">The identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelIp" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.CreateIpAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create an IP
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="domain">The domain.</param>
            <param name="subdomain">The subdomain.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelIp" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.DeleteIpAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete an IP
            </summary>
            <param name="ipId">The ip identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.ValidateIpAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Validate an IP
            </summary>
            <param name="ipId">The ip identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.IpValidation" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetAllLinksAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all Link whitelabels
            </summary>
            <param name="segmentPrefix">The segment prefix.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
            <remarks>
            A link whitelabel consists of a subdomain and domain that will be used to rewrite links in mail
            messages. Our customer will be asked to create a couple CNAME records for the links to be
            rewritten to and for us to verify that they are the domain owners.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetLinkAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get a specific Link whitelabel
            </summary>
            <param name="linkId">The identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.CreateLinkAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a Link
            </summary>
            <param name="domain">The domain.</param>
            <param name="subdomain">The subdomain.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.UpdateLinkAsync(System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update a Link
            </summary>
            <param name="linkId">The link identifier.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.DeleteLinkAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a link
            </summary>
            <param name="linkId">The link identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetDefaultLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the default link for a domain
            </summary>
            <param name="domain">The domain.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.ValidateLinkAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Validate a link
            </summary>
            <param name="linkId">The link identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.LinkValidation" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.GetAssociatedLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Associated Link
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
            <remarks>
            Link Whitelabels can be associated with subusers via parent accounts. This functionality allows
            subusers to send mail off their parent's Whitelabels. To associate a Whitelabel, the parent
            account must first create a Whitelabel and validate it. Then the parent may associate the
            Whitelabel in subuser management.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.DisassociateLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Disassociate Link
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.IWhitelabel.AssociateLinkAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Associate Link
            </summary>
            <param name="linkId">The link identifier.</param>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Lists">
            <summary>
            Allows you to create an manage lists.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/contactdb.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Lists.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Lists" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Lists.CreateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a list.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.List" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all lists.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.List" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.DeleteAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.DeleteAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Delete multiple lists.
            </summary>
            <param name="listIds">The list ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.List" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.UpdateAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.GetRecipientsAsync(System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve the recipients on a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="recordsPerPage">The records per page.</param>
            <param name="page">The page.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.AddRecipientAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Add a recipient to a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.RemoveRecipientAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove a recipient from a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="contactId">The contact identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Lists.AddRecipientsAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Add multiple recipients to a list.
            </summary>
            <param name="listId">The list identifier.</param>
            <param name="contactIds">The contact ids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Mail">
            <summary>
            Allows you to send email over SendGrid’s Web API.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/index.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Mail.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Mail" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Mail.SendToSingleRecipientAsync(StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.String,System.String,System.String,System.Boolean,System.Boolean,StrongGrid.Model.SubscriptionTrackingSettings,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,System.Threading.CancellationToken)">
            <summary>
            Send an email to a single recipient
            </summary>
            <param name="to">To.</param>
            <param name="from">From.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="trackOpens">if set to <c>true</c> [track opens].</param>
            <param name="trackClicks">if set to <c>true</c> [track clicks].</param>
            <param name="subscriptionTracking">The subscription tracking.</param>
            <param name="replyTo">The reply to.</param>
            <param name="attachments">The attachments.</param>
            <param name="templateId">The template identifier.</param>
            <param name="sections">The sections.</param>
            <param name="headers">The headers.</param>
            <param name="categories">The categories.</param>
            <param name="customArgs">The custom arguments.</param>
            <param name="sendAt">The send at.</param>
            <param name="batchId">The batch identifier.</param>
            <param name="unsubscribeOptions">The unsubscribe options.</param>
            <param name="ipPoolName">Name of the ip pool.</param>
            <param name="mailSettings">The mail settings.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The message id.
            </returns>
            <remarks>
            This is a convenience method with simplified parameters.
            If you need more options, use the <see cref="M:StrongGrid.Resources.Mail.SendAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.MailPersonalization},System.String,System.Collections.Generic.IEnumerable{StrongGrid.Model.MailContent},StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,StrongGrid.Model.TrackingSettings,System.Threading.CancellationToken)" /> method.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Mail.SendToMultipleRecipientsAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.MailAddress},StrongGrid.Model.MailAddress,System.String,System.String,System.String,System.Boolean,System.Boolean,StrongGrid.Model.SubscriptionTrackingSettings,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,System.Threading.CancellationToken)">
            <summary>
            Send the same email to multiple recipients
            </summary>
            <param name="recipients">The recipients.</param>
            <param name="from">From.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="trackOpens">if set to <c>true</c> [track opens].</param>
            <param name="trackClicks">if set to <c>true</c> [track clicks].</param>
            <param name="subscriptionTracking">The subscription tracking.</param>
            <param name="replyTo">The reply to.</param>
            <param name="attachments">The attachments.</param>
            <param name="templateId">The template identifier.</param>
            <param name="sections">The sections.</param>
            <param name="headers">The headers.</param>
            <param name="categories">The categories.</param>
            <param name="customArgs">The custom arguments.</param>
            <param name="sendAt">The send at.</param>
            <param name="batchId">The batch identifier.</param>
            <param name="unsubscribeOptions">The unsubscribe options.</param>
            <param name="ipPoolName">Name of the ip pool.</param>
            <param name="mailSettings">The mail settings.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The message id.
            </returns>
            <remarks>
            This is a convenience method with simplified parameters.
            If you need more options, use the <see cref="M:StrongGrid.Resources.Mail.SendAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.MailPersonalization},System.String,System.Collections.Generic.IEnumerable{StrongGrid.Model.MailContent},StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,StrongGrid.Model.TrackingSettings,System.Threading.CancellationToken)" /> method.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Mail.SendAsync(System.Collections.Generic.IEnumerable{StrongGrid.Model.MailPersonalization},System.String,System.Collections.Generic.IEnumerable{StrongGrid.Model.MailContent},StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.Collections.Generic.IEnumerable{StrongGrid.Model.Attachment},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Nullable{System.DateTime},System.String,StrongGrid.Model.UnsubscribeOptions,System.String,StrongGrid.Model.MailSettings,StrongGrid.Model.TrackingSettings,System.Threading.CancellationToken)">
            <summary>
            Send email(s) over SendGrid’s v3 Web API
            </summary>
            <param name="personalizations">The personalizations.</param>
            <param name="subject">The subject.</param>
            <param name="contents">The contents.</param>
            <param name="from">From.</param>
            <param name="replyTo">The reply to.</param>
            <param name="attachments">The attachments.</param>
            <param name="templateId">The template identifier.</param>
            <param name="sections">The sections.</param>
            <param name="headers">The headers.</param>
            <param name="categories">The categories.</param>
            <param name="customArgs">The custom arguments.</param>
            <param name="sendAt">The send at.</param>
            <param name="batchId">The batch identifier.</param>
            <param name="unsubscribeOptions">The unsubscribe options.</param>
            <param name="ipPoolName">Name of the ip pool.</param>
            <param name="mailSettings">The mail settings.</param>
            <param name="trackingSettings">The tracking settings.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The message id.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Segments">
            <summary>
            Allows you to create and manage segments.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/campaigns.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Segments.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Segments" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Segments.CreateAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{StrongGrid.Model.SearchCondition},System.Threading.CancellationToken)">
            <summary>
            Create a segment.
            </summary>
            <param name="name">The name.</param>
            <param name="listId">The list identifier.</param>
            <param name="conditions">The conditions.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Segment" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Segments.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all segments.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Segment" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Segments.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a segment.
            </summary>
            <param name="segmentId">The segment identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Segment" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Segments.UpdateAsync(System.Int64,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{StrongGrid.Model.SearchCondition},System.Threading.CancellationToken)">
            <summary>
            Update a segment.
            </summary>
            <param name="segmentId">The segment identifier.</param>
            <param name="name">The name.</param>
            <param name="listId">The list identifier.</param>
            <param name="conditions">The conditions.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Segment" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Segments.DeleteAsync(System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Delete a segment.
            </summary>
            <param name="segmentId">The segment identifier.</param>
            <param name="deleteMatchingContacts">if set to <c>true</c> [delete matching contacts].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Segments.GetRecipientsAsync(System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve the recipients on a segment.
            </summary>
            <param name="segmentId">The segment identifier.</param>
            <param name="recordsPerPage">The records per page.</param>
            <param name="page">The page.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Contact" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.SenderIdentities">
            <summary>
            Allows you to create and manage sender identities for Marketing Campaigns.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Marketing_Campaigns/sender_identities.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.SenderIdentities.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.SenderIdentities" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.SenderIdentities.CreateAsync(System.String,StrongGrid.Model.MailAddress,StrongGrid.Model.MailAddress,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create a sender identity.
            </summary>
            <param name="nickname">The nickname.</param>
            <param name="from">From.</param>
            <param name="replyTo">The reply to.</param>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="zip">The zip.</param>
            <param name="country">The country.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SenderIdentity" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SenderIdentities.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all sender identities.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SenderIdentity" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SenderIdentities.GetAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Retrieve a sender identity.
            </summary>
            <param name="senderId">The sender identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SenderIdentity" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SenderIdentities.UpdateAsync(System.Int64,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{StrongGrid.Model.MailAddress},StrongGrid.Utilities.Parameter{StrongGrid.Model.MailAddress},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Update a sender identity.
            </summary>
            <param name="senderId">The sender identifier.</param>
            <param name="nickname">The nickname.</param>
            <param name="from">From.</param>
            <param name="replyTo">The reply to.</param>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="zip">The zip.</param>
            <param name="country">The country.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SenderIdentity" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SenderIdentities.DeleteAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a sender identity.
            </summary>
            <param name="senderId">The sender identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SenderIdentities.ResendVerification(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Resend the verification to a sender.
            </summary>
            <param name="senderId">The sender identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Settings">
            <summary>
            Allows you to set and check the status of user settings.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Settings/index.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Settings.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Settings" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetEnforcedTlsSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get the current Enforced TLS settings.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EnforcedTlsSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateEnforcedTlsSettingsAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the Enforced TLS settings
            </summary>
            <param name="requireTls">if set to <c>true</c> [require TLS].</param>
            <param name="requireValidCert">if set to <c>true</c> [require valid cert].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EnforcedTlsSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetAllPartnerSettingsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Partner Settings
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.GlobalSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetNewRelicSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get New Relic Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.NewRelicSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateNewRelicSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the New Relic settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="licenseKey">The license key.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.NewRelicSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetAllTrackingSettingsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Tracking Settings
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.GlobalSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetClickTrackingSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Click Tracking Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateClickTrackingSettingsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the click tracking settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetGoogleAnalyticsGlobalSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Google Analytics Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.GoogleAnalyticsGlobalSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateGoogleAnalyticsGlobalSettingsAsync(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the New Relic settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="utmSource">The utm source.</param>
            <param name="utmMedium">The utm medium.</param>
            <param name="utmTerm">The utm term.</param>
            <param name="utmContent">Content of the utm.</param>
            <param name="utmCampaign">The utm campaign.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.GoogleAnalyticsGlobalSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetOpenTrackingSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Open Tracking Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateOpenTrackingSettingsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the open tracking settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetSubscriptionTrackingSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Subscription Tracking Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SubscriptionSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateSubscriptionTrackingSettingsAsync(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Subscription Tracking settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="landingPageHtml">The landing page HTML.</param>
            <param name="url">The URL.</param>
            <param name="replacementTag">The replacement tag.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SubscriptionSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetAllMailSettingsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get Mail Settings
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An aray of <see cref="T:StrongGrid.Model.GlobalSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetBccMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get BCC Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateBccMailSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the BCC settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetAddressWhitelistMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Address Whitelist Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.AddressWhitelistSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateAddressWhitelistMailSettingsAsync(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Change the Address Whitelist settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.AddressWhitelistSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetFooterMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Footer Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.FooterGlobalSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateFooterMailSettingsAsync(System.Boolean,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Footer settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.FooterGlobalSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetForwardSpamMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Forward Spam Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateForwardSpamMailSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Forward Spam settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetPlainContentMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Plain Content Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdatePlainContentMailSettingsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the Plain Content settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the setting is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetSpamCheckMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Spam Check Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SpamCheckingSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateSpamCheckMailSettingsAsync(System.Boolean,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Change the Spam Check settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="postToUrl">The post to URL.</param>
            <param name="threshold">The threshold.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SpamCheckingSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetTemplateMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Template Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateTemplateMailSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Template settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetBouncePurgeMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Bounce Purge Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.BouncePurgeSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdatBouncePurgeMailSettingsAsync(System.Boolean,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Change the Bounce Purge settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="hardBounces">The hard bounces.</param>
            <param name="softBounces">The soft bounces.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.BouncePurgeSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.GetForwardBounceMailSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Forward Bounce Settings
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Settings.UpdateForwardBounceMailSettingsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Change the Forward Spam settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EmailAddressSetting" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.SpamReports">
            <summary>
            Gives you access to spam reports.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/spam_reports.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.SpamReports.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.SpamReports" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.SpamReports.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific spam report.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SpamReport" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SpamReports.GetAllAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            List all spam reports.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SpamReport" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SpamReports.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all spam reports.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SpamReports.DeleteMultipleAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Delete multiple spam reports.
            </summary>
            <param name="emailAddresses">The email addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.SpamReports.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a specific spam report.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Statistics">
            <summary>
            The stats APIs provide a read-only access to your SendGrid email statistics.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/index.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Statistics" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.GetGlobalStatisticsAsync(System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get all global email statistics for a given date range.
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/global.html
            </summary>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.GetCategoriesStatisticsAsync(System.Collections.Generic.IEnumerable{System.String},System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get email statistics for the given categories. If you don’t pass any parameters, the endpoint will return a sum for each category 10 at a time.
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/categories.html
            </summary>
            <param name="categories">The categories to get statistics for, up to 10</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.GetSubusersStatisticsAsync(System.Collections.Generic.IEnumerable{System.String},System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get email statistics for the given subusers. You can add up to 10 subusers parameters, one for each subuser you want stats for.
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/subusers.html
            </summary>
            <param name="subusers">The subusers to get statistics for, up to 10</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.GetCountryStatisticsAsync(System.String,System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Gets email statistics by country and state/province. Only supported for US and CA.
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="country">US|CA</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.GetDeviceTypesStatisticsAsync(System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Gets email statistics by device type
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.GetClientTypesStatisticsAsync(System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get email statistics by client type
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.GetInboxProvidersStatisticsAsync(System.Collections.Generic.IEnumerable{System.String},System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Gets email statistics by mailbox provider
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="providers">The mailbox providers to get statistics for, up to 10</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Statistics.GetBrowsersStatisticsAsync(System.Collections.Generic.IEnumerable{System.String},System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Gets email statistics by browser
            See: https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/advanced.html
            </summary>
            <param name="browsers">The browsers to get statistics for, up to 10</param>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Subusers">
            <summary>
            Allows you to manage Subusers.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/subusers.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Subusers" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get an existing Subuser
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Subuser" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.GetAllAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            List all Subusers for a parent
            </summary>
            <param name="username">The username.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Subuser" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.CreateAsync(System.String,System.String,System.String,StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Create a new Subuser
            </summary>
            <param name="username">The username.</param>
            <param name="email">The email address.</param>
            <param name="password">The password.</param>
            <param name="ips">The ip addresses.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Subuser" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an existing Subuser
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.UpdateAsync(System.String,StrongGrid.Utilities.Parameter{System.Boolean},StrongGrid.Utilities.Parameter{System.Collections.Generic.IEnumerable{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update a Subuser.
            </summary>
            <param name="username">The template identifier.</param>
            <param name="disabled">The name.</param>
            <param name="ips">The ips.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.GetMonitorSettingsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the monitor settings
            </summary>
            <param name="username">The sub user.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.MonitorSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.CreateMonitorSettingsAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Create monitor settings
            </summary>
            <param name="username">The sub user.</param>
            <param name="email">The email address to receive the monitor emails.</param>
            <param name="frequency">The frequency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.MonitorSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.UpdateMonitorSettingsAsync(System.String,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Update monitor settings
            </summary>
            <param name="username">The sub user.</param>
            <param name="email">The email address to receive the monitor emails.</param>
            <param name="frequency">The frequency.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.MonitorSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Subusers.DeleteMonitorSettingsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete monitor settings
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Suppressions">
            <summary>
            Suppressions are email addresses that can be added to groups to prevent certain types of emails
            from being delivered to those addresses.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/suppressions.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Suppressions.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Suppressions" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Suppressions.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Get all suppressions.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Suppression"/>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Suppressions.GetUnsubscribedGroupsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all unsubscribe groups that the given email address has been added to.
            </summary>
            <param name="email">Email address to search for across all groups</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Suppression"/>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Suppressions.GetUnsubscribedAddressesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get suppressed addresses for a given group.
            </summary>
            <param name="groupId">ID of the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of string representing the email addresses
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Suppressions.AddAddressToUnsubscribeGroupAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Add recipient address to the suppressions list for a given group.
            If the group has been deleted, this request will add the address to the global suppression.
            </summary>
            <param name="groupId">ID of the suppression group</param>
            <param name="email">Email address to add to the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Suppressions.AddAddressToUnsubscribeGroupAsync(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Add recipient addresses to the suppressions list for a given group.
            If the group has been deleted, this request will add the address to the global suppression.
            </summary>
            <param name="groupId">ID of the suppression group</param>
            <param name="emails">Email addresses to add to the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Suppressions.RemoveAddressFromSuppressionGroupAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a recipient email from the suppressions list for a group.
            </summary>
            <param name="groupId">ID of the suppression group to delete</param>
            <param name="email">Email address to remove from the suppression group</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Suppressions.IsSuppressedAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a recipient address is in the given suppression group.
            </summary>
            <param name="groupId">ID of the suppression group</param>
            <param name="email">email address to check</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <c>true</c> if the email address is in the global suppression group; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Teammates">
            <summary>
            You can invite teammates or they can request access to certain scopes and you can accept
            or deny these requests
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/teammates.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Teammates" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.GetAccessRequestsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve a list of all recent access requests.
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of access requests
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.DenyAccessRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deny an attempt to access your account.
            </summary>
            <param name="requestId">The ID of the request that you want to deny.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.ApproveAccessRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Approve an attempt to access your account.
            </summary>
            <param name="requestId">The ID of the request that you want to approve.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.ResendInvitationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resend a teammate invite
            </summary>
            <param name="token">The token for the invite that you want to resend.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <remarks>
            Teammate invitations will expire after 7 days.
            Resending an invite will reset the expiration date.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.GetAllPendingInvitationsAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve a list of all pending teammate invitations
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An array of <see cref="T:StrongGrid.Model.TeammateInvitation" />.</returns>
            <remarks>
            Each teammate invitation is valid for 7 days.
            Users may resend the invite to refresh the expiration date.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.DeleteInvitationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a pending teammate invite
            </summary>
            <param name="token">The token for the invite that you want to delete.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <remarks>
            Each teammate invitation is valid for 7 days.
            Users may resend the invite to refresh the expiration date.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.InviteTeammateAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Send a teammate invitation via email with a predefined set of scopes, or permissions.
            A teammate invite will expire after 7 days, but you may resend the invite at any time
            to reset the expiration date.
            </summary>
            <param name="email">The email address of the teammate</param>
            <param name="scopes">The scopes, or permissions, the teammate will be granted</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <remarks>
            Essentials, Legacy Lite, and Free Trial users may create up to one teammate per account.
            There is not a teammate limit for Pro and higher plans.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.InviteTeammateAsAdminAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send a teammate invitation via email with admin permissions.
            A teammate invite will expire after 7 days, but you may resend the invite at any time
            to reset the expiration date.
            </summary>
            <param name="email">The email address of the teammate</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
            <remarks>
            Essentials, Legacy Lite, and Free Trial users may create up to one teammate per account.
            There is not a teammate limit for Pro and higher plans.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.GetAllTeammatesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Retrieve a list of all current teammates
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>An array of <see cref="T:StrongGrid.Model.Teammate" />.</returns>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.GetTeammateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific teammate by username
            </summary>
            <param name="username">The teammate username</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:StrongGrid.Model.Teammate" />.</returns>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.UpdateTeammatePermissionsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Retrieve a specific teammate by username
            </summary>
            <param name="username">The teammate username</param>
            <param name="scopes">The permissions to asign to the teammate</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The <see cref="T:StrongGrid.Model.Teammate" />.</returns>
        </member>
        <member name="M:StrongGrid.Resources.Teammates.DeleteTeammateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a teammate
            </summary>
            <param name="username">The teammate username</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Templates">
            <summary>
            Allows you to manage templates.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Transactional_Templates/templates.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Templates.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Templates" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Templates.CreateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a template.
            </summary>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Template" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all templates.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Template" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a template.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Template" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.UpdateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a template.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="name">The name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Template" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a template.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.CreateVersionAsync(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a template version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="name">The name.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="isActive">if set to <c>true</c> [is active].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateVersion" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.ActivateVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Activate a version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="versionId">The version identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateVersion" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.GetVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve a template version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="versionId">The version identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateVersion" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.UpdateVersionAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Update a template version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="versionId">The version identifier.</param>
            <param name="name">The name.</param>
            <param name="subject">The subject.</param>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="textContent">Content of the text.</param>
            <param name="isActive">The is active.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.TemplateVersion" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Templates.DeleteVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a template version.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="versionId">The version identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.UnsubscribeGroups">
            <summary>
            Allows you to manage suppression groups.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/groups.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.UnsubscribeGroups.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.UnsubscribeGroups" /> class.
            See
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.UnsubscribeGroups.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve all suppression groups associated with the user.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.UnsubscribeGroups.GetMultipleAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Retrieve the suppression groups that match the specified ids.
            </summary>
            <param name="groupIds">The Ids of the desired groups.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.UnsubscribeGroups.GetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get information on a single suppression group.
            </summary>
            <param name="groupId">ID of the suppression group to delete</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.UnsubscribeGroups.CreateAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a new suppression group.
            </summary>
            <param name="name">The name of the new suppression group</param>
            <param name="description">A description of the suppression group</param>
            <param name="isDefault">Default value is false</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.UnsubscribeGroups.UpdateAsync(System.Int32,StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Update an existing suppression group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="name">The name of the new suppression group</param>
            <param name="description">A description of the suppression group</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.SuppressionGroup" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.UnsubscribeGroups.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Delete a suppression group.
            </summary>
            <param name="groupId">ID of the suppression group to delete</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.User">
            <summary>
            Allows access to information about the current user.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/user.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.User.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.User" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.User.GetProfileAsync(System.Threading.CancellationToken)">
            <summary>
            Get your user profile
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.UserProfile" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.UpdateProfileAsync(StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},StrongGrid.Utilities.Parameter{System.String},System.Threading.CancellationToken)">
            <summary>
            Update your user profile
            </summary>
            <param name="address">The address.</param>
            <param name="city">The city.</param>
            <param name="company">The company.</param>
            <param name="country">The country.</param>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <param name="phone">The phone.</param>
            <param name="state">The state.</param>
            <param name="website">The website.</param>
            <param name="zip">The zip.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.UserProfile" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.GetAccountAsync(System.Threading.CancellationToken)">
            <summary>
            Get your user account
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.Account" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.GetEmailAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the email address on file for your account
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The email address from your user profile.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.UpdateEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Update the email address on file for your account
            </summary>
            <param name="email">The email.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The email address from your user profile.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.GetUsernameAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve your account username
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The username from your user profile.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.UpdateUsernameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Update your account username
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The username from your user profile.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.GetCreditsAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the current credit balance for your account
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.UserCredits"/>.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.UpdatePasswordAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update the password for your account
            </summary>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.User.GetPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            List all available scopes for a user
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of string representing the permissions (aka scopes).
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.WebhookSettings">
            <summary>
            Allows you to set and check webhook settings.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Webhooks/event.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.WebhookSettings.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.WebhookSettings" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.WebhookSettings.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Get the current Event Webhook settings.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EventWebhookSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.WebhookSettings.UpdateAsync(System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Change the Event Webhook settings
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="url">the webhook endpoint url</param>
            <param name="bounce">if set to <c>true</c> [bounce].</param>
            <param name="click">if set to <c>true</c> [click].</param>
            <param name="deferred">if set to <c>true</c> [deferred].</param>
            <param name="delivered">if set to <c>true</c> [delivered].</param>
            <param name="dropped">if set to <c>true</c> [dropped].</param>
            <param name="groupResubscribe">if set to <c>true</c> [groupResubscribe].</param>
            <param name="groupUnsubscribe">if set to <c>true</c> [groupUnsubscribe].</param>
            <param name="open">if set to <c>true</c> [open].</param>
            <param name="processed">if set to <c>true</c> [processed].</param>
            <param name="spamReport">if set to <c>true</c> [spamReport].</param>
            <param name="unsubscribe">if set to <c>true</c> [unsubscribe].</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:StrongGrid.Model.EventWebhookSettings" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.WebhookSettings.SendTestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a fake event notification post to the provided URL.
            </summary>
            <param name="url">the event notification endpoint url</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.WebhookStats">
            <summary>
            Provides statistics on your Webhook usage.
            </summary>
            <remarks>
            See https://sendgrid.com/docs/API_Reference/Web_API_v3/Stats/parse.html
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.WebhookStats.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.WebhookStats" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.WebhookStats.GetInboundParseUsageAsync(System.DateTime,System.Nullable{System.DateTime},StrongGrid.Model.AggregateBy,System.Threading.CancellationToken)">
            <summary>
            Get statistics for Inbound Parse Webhook usage.
            </summary>
            <param name="startDate">The starting date of the statistics to retrieve.</param>
            <param name="endDate">The end date of the statistics to retrieve. Defaults to today.</param>
            <param name="aggregatedBy">How to group the statistics, must be day|week|month</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.Statistic" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Resources.Whitelabel">
            <summary>
            Allows you to manage whitelabeling settings
            </summary>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.#ctor(Pathoschild.Http.Client.IClient)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Resources.Whitelabel" /> class.
            </summary>
            <param name="client">The HTTP client</param>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetAllDomainsAsync(System.Int32,System.Int32,System.Boolean,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get all domain whitelabels
            </summary>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="excludeSubusers">if set to <c>true</c> [exclude subusers].</param>
            <param name="username">The username.</param>
            <param name="domain">The domain.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
            <remarks>
            A domain whitelabel consists of a subdomain and domain that will be used to set the
            appropriate DKIM, SPF, and Return-Path. There is an option to allow SendGrid to manage
            security or the customers may manage their own DNS records. For customers using the
            manual security option, they will need to create the appropriate MX, DKIM, and SPF records
            with their hosting provider. With automatic security, the customer will just need to create a
            few CNAMEs to SendGrid, and SendGrid will manage the MX, DKIM and SPF records.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetDomainAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get a specific domain whitelabel
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.CreateDomainAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a new domain whitelabel
            </summary>
            <param name="domain">The domain.</param>
            <param name="subdomain">The subdomain.</param>
            <param name="automaticSecurity">if set to <c>true</c> [automatic security].</param>
            <param name="customSpf">if set to <c>true</c> [custom SPF].</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.UpdateDomainAsync(System.Int64,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update a whitelabel domain.
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="customSpf">if set to <c>true</c> [custom SPF].</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.DeleteDomainAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a whitelabel domain.
            </summary>
            <param name="domainId">The identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.AddIpAddressToDomainAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Add an IP to a Domain
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="ipAddress">The ip address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.DeleteIpAddressFromDomainAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Remove an IP from a Domain
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="ipAddress">The ip address.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.ValidateDomainAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Validate a Domain
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.DomainValidation" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetAssociatedDomainAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Associated Domain
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
            <remarks>
            Domain Whitelabels can be associated with subusers via parent accounts. This functionality
            allows subusers to send mail off their parent's Whitelabels. To associate a Whitelabel, the
            parent account must first create a Whitelabel and validate it. Then the parent may associate
            the Whitelabel in subuser management.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.DisassociateDomainAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Disassociate Domain
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.AssociateDomainAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Associate Domain
            </summary>
            <param name="domainId">The domain identifier.</param>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelDomain" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetAllIpsAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all IP whitelabels
            </summary>
            <param name="segmentPrefix">The segment prefix.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.WhitelabelIp" />.
            </returns>
            <remarks>
            A IP whitelabel consists of a subdomain and domain that will be used to generate a reverse
            DNS record for a given IP. Once SendGrid has verified that the customer has created the
            appropriate A record for their IP, SendGrid will create the appropriate reverse DNS record for
            the IP.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetIpAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get a specific IP whitelabel
            </summary>
            <param name="ipId">The identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelIp" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.CreateIpAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create an IP
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="domain">The domain.</param>
            <param name="subdomain">The subdomain.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelIp" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.DeleteIpAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete an IP
            </summary>
            <param name="ipId">The ip identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.ValidateIpAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Validate an IP
            </summary>
            <param name="ipId">The ip identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.IpValidation" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetAllLinksAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all Link whitelabels
            </summary>
            <param name="segmentPrefix">The segment prefix.</param>
            <param name="limit">The limit.</param>
            <param name="offset">The offset.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            An array of <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
            <remarks>
            A link whitelabel consists of a subdomain and domain that will be used to rewrite links in mail
            messages. Our customer will be asked to create a couple CNAME records for the links to be
            rewritten to and for us to verify that they are the domain owners.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetLinkAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Get a specific Link whitelabel
            </summary>
            <param name="linkId">The identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.CreateLinkAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a Link
            </summary>
            <param name="domain">The domain.</param>
            <param name="subdomain">The subdomain.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.UpdateLinkAsync(System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update a Link
            </summary>
            <param name="linkId">The link identifier.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.DeleteLinkAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Delete a link
            </summary>
            <param name="linkId">The link identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetDefaultLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the default link for a domain
            </summary>
            <param name="domain">The domain.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.ValidateLinkAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Validate a link
            </summary>
            <param name="linkId">The link identifier.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.LinkValidation" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.GetAssociatedLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Associated Link
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
            <remarks>
            Link Whitelabels can be associated with subusers via parent accounts. This functionality allows
            subusers to send mail off their parent's Whitelabels. To associate a Whitelabel, the parent
            account must first create a Whitelabel and validate it. Then the parent may associate the
            Whitelabel in subuser management.
            </remarks>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.DisassociateLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Disassociate Link
            </summary>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The async task.
            </returns>
        </member>
        <member name="M:StrongGrid.Resources.Whitelabel.AssociateLinkAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Associate Link
            </summary>
            <param name="linkId">The link identifier.</param>
            <param name="username">The username.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            The <see cref="T:StrongGrid.Model.WhitelabelLink" />.
            </returns>
        </member>
        <member name="T:StrongGrid.Utilities.CategoryConverter">
            <summary>
            Converts a category (represented either by a string or an array of strings) to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:StrongGrid.Utilities.CategoryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:StrongGrid.Utilities.CategoryConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Utilities.CategoryConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:StrongGrid.Utilities.CategoryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StrongGrid.Utilities.CategoryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.Exception">Unable to determine the field type</exception>
        </member>
        <member name="T:StrongGrid.Utilities.CustomFieldsConverter">
            <summary>
            Converts a <see cref="T:StrongGrid.Model.Field"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:StrongGrid.Utilities.CustomFieldsConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.CustomFieldsConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StrongGrid.Utilities.CustomFieldsConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.Exception">Unable to determine the field type</exception>
        </member>
        <member name="T:StrongGrid.Utilities.DiagnosticHandler">
            <summary>
            Diagnostic handler for requests dispatched to the SendGrid API
            </summary>
            <seealso cref="T:Pathoschild.Http.Client.Extensibility.IHttpFilter" />
        </member>
        <member name="M:StrongGrid.Utilities.DiagnosticHandler.OnRequest(Pathoschild.Http.Client.IRequest)">
            <summary>Method invoked just before the HTTP request is submitted. This method can modify the outgoing HTTP request.</summary>
            <param name="request">The HTTP request.</param>
        </member>
        <member name="M:StrongGrid.Utilities.DiagnosticHandler.OnResponse(Pathoschild.Http.Client.IResponse,System.Boolean)">
            <summary>Method invoked just after the HTTP response is received. This method can modify the incoming HTTP response.</summary>
            <param name="response">The HTTP response.</param>
            <param name="httpErrorAsException">Whether HTTP error responses should be raised as exceptions.</param>
        </member>
        <member name="T:StrongGrid.Utilities.EpochConverter">
            <summary>
            Converts a 'Unix time' expressed as the number of seconds since midnight on January 1st 1970 to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.Converters.DateTimeConverterBase" />
        </member>
        <member name="M:StrongGrid.Utilities.EpochConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.EpochConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StrongGrid.Utilities.EpochConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="T:StrongGrid.Utilities.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.FromUnixTime(System.Int64)">
            <summary>
            Converts a 'unix time' (which is expressed as the number of seconds since midnight on
            January 1st 1970) to a .Net <see cref="T:System.DateTime" />.
            </summary>
            <param name="unixTime">The unix time.</param>
            <returns>
            The <see cref="T:System.DateTime" />.
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.ToUnixTime(System.DateTime)">
            <summary>
            Converts a .Net <see cref="T:System.DateTime" /> into a 'Unix time' (which is expressed as the number
            of seconds since midnight on January 1st 1970).
            </summary>
            <param name="date">The date.</param>
            <returns>
            The numer of seconds since midnight on January 1st 1970.
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.ReadAsStringAsync(System.Net.Http.HttpContent,System.Text.Encoding)">
             <summary>
             Reads the content of the HTTP response as string asynchronously.
             </summary>
             <param name="content">The content.</param>
             <param name="encoding">The encoding. You can leave this parameter null and the encoding will be
             automatically calculated based on the charset in the response. Also, UTF-8
             encoding will be used if the charset is absent from the response, is blank
             or contains an invalid value.</param>
             <returns>The string content of the response</returns>
             <remarks>
             This method is an improvement over the built-in ReadAsStringAsync method
             because it can handle invalid charset returned in the response. For example
             you may be sending a request to an API that returns a blank charset or a
             mispelled one like 'utf8' instead of the correctly spelled 'utf-8'. The
             built-in method throws an exception if an invalid charset is specified
             while this method uses the UTF-8 encoding in that situation.
            
             My motivation for writing this extension method was to work around a situation
             where the 3rd party API I was sending requests to would sometimes return 'utf8'
             as the charset and an exception would be thrown when I called the ReadAsStringAsync
             method to get the content of the response into a string because the .Net HttpClient
             would attempt to determine the proper encoding to use but it would fail due to
             the fact that the charset was misspelled. I contacted the vendor, asking them
             to either omit the charset or fix the misspelling but they didn't feel the need
             to fix this issue because:
             "in some programming languages, you can use the syntax utf8 instead of utf-8".
             In other words, they are happy to continue using the misspelled value which is
             supported by "some" programming languages instead of using the properly spelled
             value which is supported by all programming languages!
             </remarks>
             <example>
             <code>
             var httpRequest = new HttpRequestMessage
             {
                 Method = HttpMethod.Get,
                 RequestUri = new Uri("https://api.vendor.com/v1/endpoint")
             };
             var httpClient = new HttpClient();
             var response = await httpClient.SendAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
             var responseContent = await response.Content.ReadAsStringAsync(null).ConfigureAwait(false);
             </code>
             </example>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.GetEncoding(System.Net.Http.HttpContent,System.Text.Encoding)">
            <summary>
            Gets the encoding.
            </summary>
            <param name="content">The content.</param>
            <param name="defaultEncoding">The default encoding.</param>
            <returns>
            The encoding
            </returns>
            <remarks>
            This method tries to get the encoding based on the charset or uses the
            'defaultEncoding' if the charset is empty or contains an invalid value.
            </remarks>
            <example>
              <code>
            var httpRequest = new HttpRequestMessage
            {
            Method = HttpMethod.Get,
            RequestUri = new Uri("https://my.api.com/v1/myendpoint")
            };
            var httpClient = new HttpClient();
            var response = await httpClient.SendAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            var encoding = response.Content.GetEncoding(Encoding.UTF8);
            </code>
            </example>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.GetParameterValue(HttpMultipartParser.MultipartFormDataParser,System.String,System.String)">
            <summary>
            Returns the value of a parameter or the default value if it doesn't exist.
            </summary>
            <param name="parser">The parser.</param>
            <param name="name">The name of the parameter.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the parameter</returns>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.AsSendGridObject``1(Pathoschild.Http.Client.IResponse,System.String)">
            <summary>Asynchronously retrieve the JSON encoded response body and convert it to a 'SendGrid' object of the desired type.</summary>
            <typeparam name="T">The response model to deserialize into.</typeparam>
            <param name="response">The response</param>
            <param name="propertyName">The name of the JSON property (or null if not applicable) where the desired data is stored</param>
            <returns>Returns the response body, or <c>null</c> if the response has no body.</returns>
            <exception cref="T:Pathoschild.Http.Client.ApiException">An error occurred processing the response.</exception>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.AsSendGridObject``1(Pathoschild.Http.Client.IRequest,System.String)">
            <summary>Asynchronously retrieve the JSON encoded response body and convert it to a 'SendGrid' object of the desired type.</summary>
            <typeparam name="T">The response model to deserialize into.</typeparam>
            <param name="request">The request</param>
            <param name="propertyName">The name of the JSON property (or null if not applicable) where the desired data is stored</param>
            <returns>Returns the response body, or <c>null</c> if the response has no body.</returns>
            <exception cref="T:Pathoschild.Http.Client.ApiException">An error occurred processing the response.</exception>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.WithJsonBody``1(Pathoschild.Http.Client.IRequest,``0)">
            <summary>Set the body content of the HTTP request.</summary>
            <typeparam name="T">The type of object to serialize into a JSON string.</typeparam>
            <param name="request">The request.</param>
            <param name="body">The value to serialize into the HTTP body content.</param>
            <returns>Returns the request builder for chaining.</returns>
            <remarks>
            This method is equivalent to IRequest.AsBody&lt;T&gt;(T body) because omitting the media type
            causes the first formatter in MediaTypeFormatterCollection to be used by default and the first
            formatter happens to be the JSON formatter. However, I don't feel good about relying on the
            default ordering of the items in the MediaTypeFormatterCollection.
            </remarks>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.AsString(Pathoschild.Http.Client.IResponse,System.Text.Encoding)">
            <summary>Asynchronously retrieve the response body as a <see cref="T:System.String"/>.</summary>
            <param name="response">The response</param>
            <param name="encoding">The encoding. You can leave this parameter null and the encoding will be
            automatically calculated based on the charset in the response. Also, UTF-8
            encoding will be used if the charset is absent from the response, is blank
            or contains an invalid value.</param>
            <returns>Returns the response body, or <c>null</c> if the response has no body.</returns>
            <exception cref="T:Pathoschild.Http.Client.ApiException">An error occurred processing the response.</exception>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.AsString(Pathoschild.Http.Client.IRequest,System.Text.Encoding)">
            <summary>Asynchronously retrieve the response body as a <see cref="T:System.String"/>.</summary>
            <param name="request">The request</param>
            <param name="encoding">The encoding. You can leave this parameter null and the encoding will be
            automatically calculated based on the charset in the response. Also, UTF-8
            encoding will be used if the charset is absent from the response, is blank
            or contains an invalid value.</param>
            <returns>Returns the response body, or <c>null</c> if the response has no body.</returns>
            <exception cref="T:Pathoschild.Http.Client.ApiException">An error occurred processing the response.</exception>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.ToDurationString(System.TimeSpan)">
            <summary>
             Converts the value of the current System.TimeSpan object to its equivalent string
             representation by using a human readable format.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>Returns the human readable representation of the TimeSpan</returns>
        </member>
        <member name="M:StrongGrid.Utilities.Extensions.AsSendGridObject``1(System.Net.Http.HttpContent,System.String)">
            <summary>Asynchronously converts the JSON encoded content and converts it to a 'SendGrid' object of the desired type.</summary>
            <typeparam name="T">The response model to deserialize into.</typeparam>
            <param name="httpContent">The content</param>
            <param name="propertyName">The name of the JSON property (or null if not applicable) where the desired data is stored</param>
            <returns>Returns the response body, or <c>null</c> if the response has no body.</returns>
            <exception cref="T:Pathoschild.Http.Client.ApiException">An error occurred processing the response.</exception>
        </member>
        <member name="T:StrongGrid.Utilities.IntegerBooleanConverter">
            <summary>
            Converts a boolean expressed as  1 for True or 0 for False to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:StrongGrid.Utilities.IntegerBooleanConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.IntegerBooleanConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StrongGrid.Utilities.IntegerBooleanConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="T:StrongGrid.Utilities.ISystemClock">
            <summary>
            Interface for the SystemClock
            </summary>
        </member>
        <member name="P:StrongGrid.Utilities.ISystemClock.Now">
            <summary>
            Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this
            computer, expressed as the local time.
            </summary>
            <value>
            The current date and time, expressed as the local time.
            </value>
        </member>
        <member name="P:StrongGrid.Utilities.ISystemClock.UtcNow">
            <summary>
            Gets a System.DateTime object that is set to the current date and time on this
            computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
            <value>
            The current date and time, expressed as the Coordinated Universal Time (UTC).
            </value>
        </member>
        <member name="T:StrongGrid.Utilities.KeyValuePairEnumerationConverter">
            <summary>
            Converts an enumeration of KeyValuePair to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:StrongGrid.Utilities.KeyValuePairEnumerationConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:StrongGrid.Utilities.KeyValuePairEnumerationConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Utilities.KeyValuePairEnumerationConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:StrongGrid.Utilities.KeyValuePairEnumerationConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StrongGrid.Utilities.KeyValuePairEnumerationConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="T:StrongGrid.Utilities.MetricsConverter">
            <summary>
            Converts a JSON string into and array of <see cref="T:System.Collections.Generic.KeyValuePair`2">metrics</see>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:StrongGrid.Utilities.MetricsConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:StrongGrid.Utilities.MetricsConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Utilities.MetricsConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:StrongGrid.Utilities.MetricsConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StrongGrid.Utilities.MetricsConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.Exception">Unable to determine the field type</exception>
        </member>
        <member name="T:StrongGrid.Utilities.Parameter`1">
            <summary>
            A generic Parameter type that allows for an explicit difference
            between an intentionally set value (which could be nullable),
            and an unspecified value.
            </summary>
            <typeparam name="T">The type to create a parameter for.</typeparam>
        </member>
        <member name="P:StrongGrid.Utilities.Parameter`1.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value><c>true</c> if this instance has a value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:StrongGrid.Utilities.Parameter`1.Value">
            <summary>
            Gets a value captured by this instance.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Utilities.Parameter`1"/> struct.
            </summary>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.op_Implicit(StrongGrid.Utilities.Parameter{`0})~`0">
            <summary>
            Returns the value of an instance.
            </summary>
            <param name="parameter">The instance.</param>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.op_Implicit(`0)~StrongGrid.Utilities.Parameter{`0}">
            <summary>
            Creates a new instance with the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.op_True(StrongGrid.Utilities.Parameter{`0})">
            <summary>
            Gets a value indicating whether an instance has value.
            </summary>
            <param name="optional">The instance.</param>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.op_False(StrongGrid.Utilities.Parameter{`0})">
            <summary>
            Gets a value indicating whether an instance has value.
            </summary>
            <param name="optional">The instance.</param>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.op_LogicalNot(StrongGrid.Utilities.Parameter{`0})">
            <summary>
            Implements the operator !.
            </summary>
            <param name="optional">The instance.</param>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.op_Equality(StrongGrid.Utilities.Parameter{`0},StrongGrid.Utilities.Parameter{`0})">
            <summary>
            Compares two parameters for equality.
            </summary>
            <param name="lhs">The parameter on the left hand side.</param>
            <param name="rhs">The parameter on the right hand side.</param>
            <returns>
            true if the parameters' values are equal
            or both parameters' values are omitted,
            and false if the parameters' values are not
            equal or only one parameter's value is ommitted
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.op_Inequality(StrongGrid.Utilities.Parameter{`0},StrongGrid.Utilities.Parameter{`0})">
            <summary>
            Comapares two parameters for inequality.
            </summary>
            <param name="lhs">The parameter on the left hand side.</param>
            <param name="rhs">The parameter on the right hand side.</param>
            <returns>
            true if the parameters' values are not
            equal or only one parameter's value is ommitted,
            and false if the parameters' values are equal
            or both parameters' values are omitted.
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.op_BitwiseOr(StrongGrid.Utilities.Parameter{`0},`0)">
            <summary>
            If the specified instance has a value, returns it, otherwise returns the defaut one.
            </summary>
            <param name="optional">The instance</param>
            <param name="default">The default value.</param>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.Equals(StrongGrid.Utilities.Parameter{`0})">
            <summary>
            Compares the parameter to another parameter for equality.
            </summary>
            <param name="other">The parameter to compare to.</param>
            <returns>
            true if the parameters' values are equal
            or both parameters' values are omitted,
            and false if the parameters' values are not
            equal or only one parameter's value is omitted
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.Equals(System.Object)">
            <summary>
            Compares the parameter to another object for equality.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>
            true if the object is a Parameter&lt;T&gt; and
            the parameters' values are equal
            or both parameters' values are omitted,
            and false if the object is not a Parametern&lt;T&gt; or
            the parameters' values are not equal
            or only one parameter's value is omitted
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.Parameter`1.GetHashCode">
            <summary>
            Gets the HashCode for the Option&lt;T&gt;.
            </summary>
            <returns>
            0 if the Option is Option.None, otherwise
            returns the hash code of the value.
            </returns>
        </member>
        <member name="T:StrongGrid.Utilities.SendGridAttachment">
            <summary>
            Utility class grouping methods intendend to make interacting with email attachments easier.
            </summary>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridAttachment.FromLocalFile(System.String,System.String,System.String)">
            <summary>
            Convenience method that creates an attachment from a local file.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="mimeType">Optional: MIME type of the attachment. If this parameter is null, the MIME type will be derived from the fileName extension.</param>
            <param name="contentId">Optional: the unique identifier for this attachment IF AND ONLY IF the attachment should be embedded in the body of the email. This is useful, for example, if you want to embbed an image to be displayed in the HTML content. For standard attachment, this value should be null.</param>
            <returns>The attachment</returns>
            <exception cref="T:System.IO.FileNotFoundException">Unable to find the local file</exception>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridAttachment.FromStream(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            Convenience method that creates an attachment from a stream.
            </summary>
            <param name="contentStream">The stream.</param>
            <param name="fileName">The name of the attachment.</param>
            <param name="mimeType">Optional: MIME type of the attachment. If this parameter is null, the MIME type will be derived from the fileName extension.</param>
            <param name="contentId">Optional: the unique identifier for this attachment IF AND ONLY IF the attachment should be embedded in the body of the email. This is useful, for example, if you want to embbed an image to be displayed in the HTML content. For standard attachment, this value should be null.</param>
            <returns>The attachment</returns>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridAttachment.FromBinary(System.Byte[],System.String,System.String,System.String)">
            <summary>
            Convenience method that creates an attachment from a stream.
            </summary>
            <param name="content">The content.</param>
            <param name="fileName">The name of the attachment.</param>
            <param name="mimeType">Optional: MIME type of the attachment. If this parameter is null, the MIME type will be derived from the fileName extension.</param>
            <param name="contentId">Optional: the unique identifier for this attachment IF AND ONLY IF the attachment should be embedded in the body of the email. This is useful, for example, if you want to embbed an image to be displayed in the HTML content. For standard attachment, this value should be null.</param>
            <returns>The attachment</returns>
        </member>
        <member name="T:StrongGrid.Utilities.SendGridDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> expressed in a format acceptable to SendGrid to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.Converters.DateTimeConverterBase" />
        </member>
        <member name="M:StrongGrid.Utilities.SendGridDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="T:StrongGrid.Utilities.SendGridErrorHandler">
            <summary>
            Error handler for requests dispatched to the SendGrid API
            </summary>
            <seealso cref="T:Pathoschild.Http.Client.Extensibility.IHttpFilter" />
        </member>
        <member name="M:StrongGrid.Utilities.SendGridErrorHandler.OnRequest(Pathoschild.Http.Client.IRequest)">
            <summary>Method invoked just before the HTTP request is submitted. This method can modify the outgoing HTTP request.</summary>
            <param name="request">The HTTP request.</param>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridErrorHandler.OnResponse(Pathoschild.Http.Client.IResponse,System.Boolean)">
            <summary>Method invoked just after the HTTP response is received. This method can modify the incoming HTTP response.</summary>
            <param name="response">The HTTP response.</param>
            <param name="httpErrorAsException">Whether HTTP error responses should be raised as exceptions.</param>
        </member>
        <member name="T:StrongGrid.Utilities.SendGridRetryStrategy">
            <summary>
            Implements IRetryConfig with back off based on a wait time derived from the
            "X-RateLimit-Reset" response header. The value in this header contains the
            date and time (expressed as the number of seconds since midnight on January
            1st 1970) when the next attempt can take place.
            </summary>
            <seealso cref="T:Pathoschild.Http.Client.Retry.IRetryConfig" />
        </member>
        <member name="P:StrongGrid.Utilities.SendGridRetryStrategy.MaxRetries">
            <summary>Gets the maximum number of times to retry a request before failing.</summary>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridRetryStrategy.#ctor(System.Int32,StrongGrid.Utilities.ISystemClock)">
            <summary>
            Initializes a new instance of the <see cref="T:StrongGrid.Utilities.SendGridRetryStrategy" /> class.
            </summary>
            <param name="maxAttempts">The maximum attempts.</param>
            <param name="systemClock">The system clock.</param>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridRetryStrategy.ShouldRetry(System.Net.Http.HttpResponseMessage)">
            <summary>
            Checks if we should retry an operation.
            </summary>
            <param name="response">The Http response of the previous request</param>
            <returns>
              <c>true</c> if another attempt should be made; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StrongGrid.Utilities.SendGridRetryStrategy.GetDelay(System.Int32,System.Net.Http.HttpResponseMessage)">
            <summary>
            Gets a TimeSpan value which defines how long to wait before trying again after an unsuccessful attempt
            </summary>
            <param name="attempt">The number of attempts carried out so far. That is, after the first attempt (for
            the first retry), attempt will be set to 1, after the second attempt it is set to 2, and so on.</param>
            <param name="response">The Http response of the previous request</param>
            <returns>
            A TimeSpan value which defines how long to wait before the next attempt.
            </returns>
        </member>
        <member name="T:StrongGrid.Utilities.SystemClock">
            <summary>
            A replacement for .Net <see cref="P:System.DateTime.Now" /> and <see cref="P:System.DateTime.UtcNow" />.
            </summary>
            <seealso cref="T:StrongGrid.Utilities.ISystemClock" />
        </member>
        <member name="P:StrongGrid.Utilities.SystemClock.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:StrongGrid.Utilities.SystemClock.Now">
            <summary>
            Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this
            computer, expressed as the local time.
            </summary>
            <value>
            The current date and time, expressed as the local time.
            </value>
        </member>
        <member name="P:StrongGrid.Utilities.SystemClock.UtcNow">
            <summary>
            Gets a System.DateTime object that is set to the current date and time on this
            computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
            <value>
            The current date and time, expressed as the Coordinated Universal Time (UTC).
            </value>
        </member>
        <member name="T:StrongGrid.Utilities.WebHookEventConverter">
            <summary>
            Converts a JSON string received from a webhook into and array of <see cref="T:StrongGrid.Model.Webhooks.Event">events</see>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:StrongGrid.Utilities.WebHookEventConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:StrongGrid.Utilities.WebHookEventConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:StrongGrid.Utilities.WebHookEventConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:StrongGrid.Utilities.WebHookEventConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StrongGrid.Utilities.WebHookEventConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.Exception">Unable to determine the field type</exception>
        </member>
    </members>
</doc>
